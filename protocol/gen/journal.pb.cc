// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal.proto

#include "journal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace journal_engine {
constexpr JournalRequest::JournalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_()
  , clue_()
  , ledger_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , journal_id_(uint64_t{0u})
  , payload_size_(uint64_t{0u})
  , nonce_(uint64_t{0u})
  , timestamp_(uint64_t{0u}){}
struct JournalRequestDefaultTypeInternal {
  constexpr JournalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JournalRequestDefaultTypeInternal() {}
  union {
    JournalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JournalRequestDefaultTypeInternal _JournalRequest_default_instance_;
constexpr Payload::Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PayloadDefaultTypeInternal {
  constexpr PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadDefaultTypeInternal() {}
  union {
    Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadDefaultTypeInternal _Payload_default_instance_;
constexpr JournalProxying::JournalProxying(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_id_(uint64_t{0u})
  , offset_(uint64_t{0u})
  , journal_size_(uint64_t{0u})
  , server_id_(uint64_t{0u})
  , server_timestamp_(uint64_t{0u})
  , execute_status_(uint64_t{0u})
  , execute_result_(uint64_t{0u})
  , root_hash_status_(uint64_t{0u}){}
struct JournalProxyingDefaultTypeInternal {
  constexpr JournalProxyingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JournalProxyingDefaultTypeInternal() {}
  union {
    JournalProxying _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JournalProxyingDefaultTypeInternal _JournalProxying_default_instance_;
constexpr JournalReceipt::JournalReceipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proxying_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(uint64_t{0u})
  , serverimestamp_(uint64_t{0u})
  , execute_status_(uint64_t{0u})
  , execute_result_(uint64_t{0u}){}
struct JournalReceiptDefaultTypeInternal {
  constexpr JournalReceiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JournalReceiptDefaultTypeInternal() {}
  union {
    JournalReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JournalReceiptDefaultTypeInternal _JournalReceipt_default_instance_;
constexpr JournalRequestByte::JournalRequestByte(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct JournalRequestByteDefaultTypeInternal {
  constexpr JournalRequestByteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JournalRequestByteDefaultTypeInternal() {}
  union {
    JournalRequestByte _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JournalRequestByteDefaultTypeInternal _JournalRequestByte_default_instance_;
}  // namespace journal_engine
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_journal_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_journal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_journal_2eproto = nullptr;

const uint32_t TableStruct_journal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, ledger_name_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, journal_id_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, payload_name_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, payload_size_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, payload_type_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, nonce_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, sender_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, clue_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequest, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::journal_engine::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::journal_engine::Payload, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, request_hash_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, stream_id_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, offset_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, journal_size_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, server_id_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, execute_status_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, execute_result_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, root_hash_status_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalProxying, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, request_hash_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, proxying_hash_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, block_hash_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, server_id_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, serverimestamp_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, execute_status_),
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalReceipt, execute_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequestByte, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequestByte, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::journal_engine::JournalRequestByte, stream_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::journal_engine::JournalRequest)},
  { 16, -1, -1, sizeof(::journal_engine::Payload)},
  { 23, -1, -1, sizeof(::journal_engine::JournalProxying)},
  { 39, -1, -1, sizeof(::journal_engine::JournalReceipt)},
  { 52, -1, -1, sizeof(::journal_engine::JournalRequestByte)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::journal_engine::_JournalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::journal_engine::_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::journal_engine::_JournalProxying_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::journal_engine::_JournalReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::journal_engine::_JournalRequestByte_default_instance_),
};

const char descriptor_table_protodef_journal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rjournal.proto\022\016journal_engine\"\311\001\n\016Jour"
  "nalRequest\022\023\n\013ledger_name\030\001 \001(\t\022\022\n\njourn"
  "al_id\030\002 \001(\004\022\024\n\014payload_name\030\003 \001(\t\022\024\n\014pay"
  "load_size\030\004 \001(\004\022\024\n\014payload_type\030\005 \001(\t\022\r\n"
  "\005nonce\030\006 \001(\004\022\021\n\ttimestamp\030\007 \001(\004\022\016\n\006sende"
  "r\030\010 \003(\t\022\014\n\004clue\030\t \003(\t\022\014\n\004hash\030\n \001(\014\"\027\n\007P"
  "ayload\022\014\n\004data\030\001 \001(\014\"\345\001\n\017JournalProxying"
  "\022\024\n\014request_hash\030\001 \001(\t\022\021\n\tstream_id\030\002 \001("
  "\004\022\016\n\006offset\030\003 \001(\004\022\024\n\014journal_size\030\004 \001(\004\022"
  "\021\n\tserver_id\030\005 \001(\004\022\030\n\020server_timestamp\030\006"
  " \001(\004\022\026\n\016execute_status\030\007 \001(\004\022\026\n\016execute_"
  "result\030\010 \001(\004\022\030\n\020root_hash_status\030\t \001(\004\022\014"
  "\n\004hash\030\n \001(\014\"\254\001\n\016JournalReceipt\022\024\n\014reque"
  "st_hash\030\001 \001(\014\022\025\n\rproxying_hash\030\002 \001(\014\022\022\n\n"
  "block_hash\030\003 \001(\014\022\021\n\tserver_id\030\004 \001(\004\022\026\n\016s"
  "erverimestamp\030\005 \001(\004\022\026\n\016execute_status\030\006 "
  "\001(\004\022\026\n\016execute_result\030\007 \001(\004\"\205\001\n\022JournalR"
  "equestByte\0229\n\017journal_request\030\001 \001(\0132\036.jo"
  "urnal_engine.JournalRequestH\000\022*\n\007payload"
  "\030\002 \001(\0132\027.journal_engine.PayloadH\000B\010\n\006str"
  "eam2b\n\016JournalService\022P\n\010AppendTx\022\".jour"
  "nal_engine.JournalRequestByte\032\036.journal_"
  "engine.JournalReceipt(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_journal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_journal_2eproto = {
  false, false, 911, descriptor_table_protodef_journal_2eproto, "journal.proto", 
  &descriptor_table_journal_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_journal_2eproto::offsets,
  file_level_metadata_journal_2eproto, file_level_enum_descriptors_journal_2eproto, file_level_service_descriptors_journal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_journal_2eproto_getter() {
  return &descriptor_table_journal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_journal_2eproto(&descriptor_table_journal_2eproto);
namespace journal_engine {

// ===================================================================

class JournalRequest::_Internal {
 public:
};

JournalRequest::JournalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sender_(arena),
  clue_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:journal_engine.JournalRequest)
}
JournalRequest::JournalRequest(const JournalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sender_(from.sender_),
      clue_(from.clue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ledger_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ledger_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_name().empty()) {
    ledger_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ledger_name(), 
      GetArenaForAllocation());
  }
  payload_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload_name().empty()) {
    payload_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_name(), 
      GetArenaForAllocation());
  }
  payload_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload_type().empty()) {
    payload_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_type(), 
      GetArenaForAllocation());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&journal_id_, &from.journal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&journal_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:journal_engine.JournalRequest)
}

inline void JournalRequest::SharedCtor() {
ledger_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ledger_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&journal_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&journal_id_)) + sizeof(timestamp_));
}

JournalRequest::~JournalRequest() {
  // @@protoc_insertion_point(destructor:journal_engine.JournalRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JournalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ledger_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JournalRequest::ArenaDtor(void* object) {
  JournalRequest* _this = reinterpret_cast< JournalRequest* >(object);
  (void)_this;
}
void JournalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JournalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JournalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:journal_engine.JournalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.Clear();
  clue_.Clear();
  ledger_name_.ClearToEmpty();
  payload_name_.ClearToEmpty();
  payload_type_.ClearToEmpty();
  hash_.ClearToEmpty();
  ::memset(&journal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&journal_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JournalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ledger_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ledger_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "journal_engine.JournalRequest.ledger_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 journal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          journal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "journal_engine.JournalRequest.payload_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 payload_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          payload_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_payload_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "journal_engine.JournalRequest.payload_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string sender = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sender();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "journal_engine.JournalRequest.sender"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string clue = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clue();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "journal_engine.JournalRequest.clue"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JournalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:journal_engine.JournalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ledger_name = 1;
  if (!this->_internal_ledger_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ledger_name().data(), static_cast<int>(this->_internal_ledger_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "journal_engine.JournalRequest.ledger_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ledger_name(), target);
  }

  // uint64 journal_id = 2;
  if (this->_internal_journal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_journal_id(), target);
  }

  // string payload_name = 3;
  if (!this->_internal_payload_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_name().data(), static_cast<int>(this->_internal_payload_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "journal_engine.JournalRequest.payload_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload_name(), target);
  }

  // uint64 payload_size = 4;
  if (this->_internal_payload_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_payload_size(), target);
  }

  // string payload_type = 5;
  if (!this->_internal_payload_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_type().data(), static_cast<int>(this->_internal_payload_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "journal_engine.JournalRequest.payload_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payload_type(), target);
  }

  // uint64 nonce = 6;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_nonce(), target);
  }

  // uint64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp(), target);
  }

  // repeated string sender = 8;
  for (int i = 0, n = this->_internal_sender_size(); i < n; i++) {
    const auto& s = this->_internal_sender(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "journal_engine.JournalRequest.sender");
    target = stream->WriteString(8, s, target);
  }

  // repeated string clue = 9;
  for (int i = 0, n = this->_internal_clue_size(); i < n; i++) {
    const auto& s = this->_internal_clue(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "journal_engine.JournalRequest.clue");
    target = stream->WriteString(9, s, target);
  }

  // bytes hash = 10;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:journal_engine.JournalRequest)
  return target;
}

size_t JournalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:journal_engine.JournalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sender = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sender_.size());
  for (int i = 0, n = sender_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sender_.Get(i));
  }

  // repeated string clue = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clue_.size());
  for (int i = 0, n = clue_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clue_.Get(i));
  }

  // string ledger_name = 1;
  if (!this->_internal_ledger_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ledger_name());
  }

  // string payload_name = 3;
  if (!this->_internal_payload_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_name());
  }

  // string payload_type = 5;
  if (!this->_internal_payload_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_type());
  }

  // bytes hash = 10;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint64 journal_id = 2;
  if (this->_internal_journal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_journal_id());
  }

  // uint64 payload_size = 4;
  if (this->_internal_payload_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_payload_size());
  }

  // uint64 nonce = 6;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // uint64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JournalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JournalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JournalRequest::GetClassData() const { return &_class_data_; }

void JournalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JournalRequest *>(to)->MergeFrom(
      static_cast<const JournalRequest &>(from));
}


void JournalRequest::MergeFrom(const JournalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:journal_engine.JournalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sender_.MergeFrom(from.sender_);
  clue_.MergeFrom(from.clue_);
  if (!from._internal_ledger_name().empty()) {
    _internal_set_ledger_name(from._internal_ledger_name());
  }
  if (!from._internal_payload_name().empty()) {
    _internal_set_payload_name(from._internal_payload_name());
  }
  if (!from._internal_payload_type().empty()) {
    _internal_set_payload_type(from._internal_payload_type());
  }
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_journal_id() != 0) {
    _internal_set_journal_id(from._internal_journal_id());
  }
  if (from._internal_payload_size() != 0) {
    _internal_set_payload_size(from._internal_payload_size());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JournalRequest::CopyFrom(const JournalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:journal_engine.JournalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalRequest::IsInitialized() const {
  return true;
}

void JournalRequest::InternalSwap(JournalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sender_.InternalSwap(&other->sender_);
  clue_.InternalSwap(&other->clue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ledger_name_, lhs_arena,
      &other->ledger_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_name_, lhs_arena,
      &other->payload_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_type_, lhs_arena,
      &other->payload_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JournalRequest, timestamp_)
      + sizeof(JournalRequest::timestamp_)
      - PROTOBUF_FIELD_OFFSET(JournalRequest, journal_id_)>(
          reinterpret_cast<char*>(&journal_id_),
          reinterpret_cast<char*>(&other->journal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JournalRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_journal_2eproto_getter, &descriptor_table_journal_2eproto_once,
      file_level_metadata_journal_2eproto[0]);
}

// ===================================================================

class Payload::_Internal {
 public:
};

Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:journal_engine.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:journal_engine.Payload)
}

inline void Payload::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:journal_engine.Payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Payload::ArenaDtor(void* object) {
  Payload* _this = reinterpret_cast< Payload* >(object);
  (void)_this;
}
void Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:journal_engine.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:journal_engine.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:journal_engine.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:journal_engine.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload::GetClassData() const { return &_class_data_; }

void Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Payload *>(to)->MergeFrom(
      static_cast<const Payload &>(from));
}


void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:journal_engine.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:journal_engine.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_journal_2eproto_getter, &descriptor_table_journal_2eproto_once,
      file_level_metadata_journal_2eproto[1]);
}

// ===================================================================

class JournalProxying::_Internal {
 public:
};

JournalProxying::JournalProxying(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:journal_engine.JournalProxying)
}
JournalProxying::JournalProxying(const JournalProxying& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_hash().empty()) {
    request_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_hash(), 
      GetArenaForAllocation());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&root_hash_status_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(root_hash_status_));
  // @@protoc_insertion_point(copy_constructor:journal_engine.JournalProxying)
}

inline void JournalProxying::SharedCtor() {
request_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&root_hash_status_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(root_hash_status_));
}

JournalProxying::~JournalProxying() {
  // @@protoc_insertion_point(destructor:journal_engine.JournalProxying)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JournalProxying::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JournalProxying::ArenaDtor(void* object) {
  JournalProxying* _this = reinterpret_cast< JournalProxying* >(object);
  (void)_this;
}
void JournalProxying::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JournalProxying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JournalProxying::Clear() {
// @@protoc_insertion_point(message_clear_start:journal_engine.JournalProxying)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_hash_.ClearToEmpty();
  hash_.ClearToEmpty();
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&root_hash_status_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(root_hash_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JournalProxying::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "journal_engine.JournalProxying.request_hash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 journal_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          journal_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 server_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 execute_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          execute_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 execute_result = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          execute_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 root_hash_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          root_hash_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JournalProxying::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:journal_engine.JournalProxying)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_hash = 1;
  if (!this->_internal_request_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_hash().data(), static_cast<int>(this->_internal_request_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "journal_engine.JournalProxying.request_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_hash(), target);
  }

  // uint64 stream_id = 2;
  if (this->_internal_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // uint64 journal_size = 4;
  if (this->_internal_journal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_journal_size(), target);
  }

  // uint64 server_id = 5;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_server_id(), target);
  }

  // uint64 server_timestamp = 6;
  if (this->_internal_server_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_server_timestamp(), target);
  }

  // uint64 execute_status = 7;
  if (this->_internal_execute_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_execute_status(), target);
  }

  // uint64 execute_result = 8;
  if (this->_internal_execute_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_execute_result(), target);
  }

  // uint64 root_hash_status = 9;
  if (this->_internal_root_hash_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_root_hash_status(), target);
  }

  // bytes hash = 10;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:journal_engine.JournalProxying)
  return target;
}

size_t JournalProxying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:journal_engine.JournalProxying)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_hash = 1;
  if (!this->_internal_request_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_hash());
  }

  // bytes hash = 10;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint64 stream_id = 2;
  if (this->_internal_stream_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_stream_id());
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 journal_size = 4;
  if (this->_internal_journal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_journal_size());
  }

  // uint64 server_id = 5;
  if (this->_internal_server_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_id());
  }

  // uint64 server_timestamp = 6;
  if (this->_internal_server_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_timestamp());
  }

  // uint64 execute_status = 7;
  if (this->_internal_execute_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_execute_status());
  }

  // uint64 execute_result = 8;
  if (this->_internal_execute_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_execute_result());
  }

  // uint64 root_hash_status = 9;
  if (this->_internal_root_hash_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_root_hash_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JournalProxying::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JournalProxying::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JournalProxying::GetClassData() const { return &_class_data_; }

void JournalProxying::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JournalProxying *>(to)->MergeFrom(
      static_cast<const JournalProxying &>(from));
}


void JournalProxying::MergeFrom(const JournalProxying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:journal_engine.JournalProxying)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_hash().empty()) {
    _internal_set_request_hash(from._internal_request_hash());
  }
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_journal_size() != 0) {
    _internal_set_journal_size(from._internal_journal_size());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_server_timestamp() != 0) {
    _internal_set_server_timestamp(from._internal_server_timestamp());
  }
  if (from._internal_execute_status() != 0) {
    _internal_set_execute_status(from._internal_execute_status());
  }
  if (from._internal_execute_result() != 0) {
    _internal_set_execute_result(from._internal_execute_result());
  }
  if (from._internal_root_hash_status() != 0) {
    _internal_set_root_hash_status(from._internal_root_hash_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JournalProxying::CopyFrom(const JournalProxying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:journal_engine.JournalProxying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalProxying::IsInitialized() const {
  return true;
}

void JournalProxying::InternalSwap(JournalProxying* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_hash_, lhs_arena,
      &other->request_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JournalProxying, root_hash_status_)
      + sizeof(JournalProxying::root_hash_status_)
      - PROTOBUF_FIELD_OFFSET(JournalProxying, stream_id_)>(
          reinterpret_cast<char*>(&stream_id_),
          reinterpret_cast<char*>(&other->stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JournalProxying::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_journal_2eproto_getter, &descriptor_table_journal_2eproto_once,
      file_level_metadata_journal_2eproto[2]);
}

// ===================================================================

class JournalReceipt::_Internal {
 public:
};

JournalReceipt::JournalReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:journal_engine.JournalReceipt)
}
JournalReceipt::JournalReceipt(const JournalReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_hash().empty()) {
    request_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_hash(), 
      GetArenaForAllocation());
  }
  proxying_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxying_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxying_hash().empty()) {
    proxying_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxying_hash(), 
      GetArenaForAllocation());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_result_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(execute_result_));
  // @@protoc_insertion_point(copy_constructor:journal_engine.JournalReceipt)
}

inline void JournalReceipt::SharedCtor() {
request_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proxying_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxying_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&execute_result_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(execute_result_));
}

JournalReceipt::~JournalReceipt() {
  // @@protoc_insertion_point(destructor:journal_engine.JournalReceipt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JournalReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxying_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JournalReceipt::ArenaDtor(void* object) {
  JournalReceipt* _this = reinterpret_cast< JournalReceipt* >(object);
  (void)_this;
}
void JournalReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JournalReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JournalReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:journal_engine.JournalReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_hash_.ClearToEmpty();
  proxying_hash_.ClearToEmpty();
  block_hash_.ClearToEmpty();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_result_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(execute_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JournalReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes request_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proxying_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proxying_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 serverimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          serverimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 execute_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          execute_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 execute_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          execute_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JournalReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:journal_engine.JournalReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes request_hash = 1;
  if (!this->_internal_request_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_request_hash(), target);
  }

  // bytes proxying_hash = 2;
  if (!this->_internal_proxying_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_proxying_hash(), target);
  }

  // bytes block_hash = 3;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_block_hash(), target);
  }

  // uint64 server_id = 4;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_server_id(), target);
  }

  // uint64 serverimestamp = 5;
  if (this->_internal_serverimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_serverimestamp(), target);
  }

  // uint64 execute_status = 6;
  if (this->_internal_execute_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_execute_status(), target);
  }

  // uint64 execute_result = 7;
  if (this->_internal_execute_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_execute_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:journal_engine.JournalReceipt)
  return target;
}

size_t JournalReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:journal_engine.JournalReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes request_hash = 1;
  if (!this->_internal_request_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request_hash());
  }

  // bytes proxying_hash = 2;
  if (!this->_internal_proxying_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proxying_hash());
  }

  // bytes block_hash = 3;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint64 server_id = 4;
  if (this->_internal_server_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_server_id());
  }

  // uint64 serverimestamp = 5;
  if (this->_internal_serverimestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_serverimestamp());
  }

  // uint64 execute_status = 6;
  if (this->_internal_execute_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_execute_status());
  }

  // uint64 execute_result = 7;
  if (this->_internal_execute_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_execute_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JournalReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JournalReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JournalReceipt::GetClassData() const { return &_class_data_; }

void JournalReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JournalReceipt *>(to)->MergeFrom(
      static_cast<const JournalReceipt &>(from));
}


void JournalReceipt::MergeFrom(const JournalReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:journal_engine.JournalReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_hash().empty()) {
    _internal_set_request_hash(from._internal_request_hash());
  }
  if (!from._internal_proxying_hash().empty()) {
    _internal_set_proxying_hash(from._internal_proxying_hash());
  }
  if (!from._internal_block_hash().empty()) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_serverimestamp() != 0) {
    _internal_set_serverimestamp(from._internal_serverimestamp());
  }
  if (from._internal_execute_status() != 0) {
    _internal_set_execute_status(from._internal_execute_status());
  }
  if (from._internal_execute_result() != 0) {
    _internal_set_execute_result(from._internal_execute_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JournalReceipt::CopyFrom(const JournalReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:journal_engine.JournalReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalReceipt::IsInitialized() const {
  return true;
}

void JournalReceipt::InternalSwap(JournalReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_hash_, lhs_arena,
      &other->request_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxying_hash_, lhs_arena,
      &other->proxying_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_hash_, lhs_arena,
      &other->block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JournalReceipt, execute_result_)
      + sizeof(JournalReceipt::execute_result_)
      - PROTOBUF_FIELD_OFFSET(JournalReceipt, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JournalReceipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_journal_2eproto_getter, &descriptor_table_journal_2eproto_once,
      file_level_metadata_journal_2eproto[3]);
}

// ===================================================================

class JournalRequestByte::_Internal {
 public:
  static const ::journal_engine::JournalRequest& journal_request(const JournalRequestByte* msg);
  static const ::journal_engine::Payload& payload(const JournalRequestByte* msg);
};

const ::journal_engine::JournalRequest&
JournalRequestByte::_Internal::journal_request(const JournalRequestByte* msg) {
  return *msg->stream_.journal_request_;
}
const ::journal_engine::Payload&
JournalRequestByte::_Internal::payload(const JournalRequestByte* msg) {
  return *msg->stream_.payload_;
}
void JournalRequestByte::set_allocated_journal_request(::journal_engine::JournalRequest* journal_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream();
  if (journal_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::journal_engine::JournalRequest>::GetOwningArena(journal_request);
    if (message_arena != submessage_arena) {
      journal_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, journal_request, submessage_arena);
    }
    set_has_journal_request();
    stream_.journal_request_ = journal_request;
  }
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalRequestByte.journal_request)
}
void JournalRequestByte::set_allocated_payload(::journal_engine::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream();
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::journal_engine::Payload>::GetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    set_has_payload();
    stream_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalRequestByte.payload)
}
JournalRequestByte::JournalRequestByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:journal_engine.JournalRequestByte)
}
JournalRequestByte::JournalRequestByte(const JournalRequestByte& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream();
  switch (from.stream_case()) {
    case kJournalRequest: {
      _internal_mutable_journal_request()->::journal_engine::JournalRequest::MergeFrom(from._internal_journal_request());
      break;
    }
    case kPayload: {
      _internal_mutable_payload()->::journal_engine::Payload::MergeFrom(from._internal_payload());
      break;
    }
    case STREAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:journal_engine.JournalRequestByte)
}

inline void JournalRequestByte::SharedCtor() {
clear_has_stream();
}

JournalRequestByte::~JournalRequestByte() {
  // @@protoc_insertion_point(destructor:journal_engine.JournalRequestByte)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JournalRequestByte::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_stream()) {
    clear_stream();
  }
}

void JournalRequestByte::ArenaDtor(void* object) {
  JournalRequestByte* _this = reinterpret_cast< JournalRequestByte* >(object);
  (void)_this;
}
void JournalRequestByte::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JournalRequestByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JournalRequestByte::clear_stream() {
// @@protoc_insertion_point(one_of_clear_start:journal_engine.JournalRequestByte)
  switch (stream_case()) {
    case kJournalRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_.journal_request_;
      }
      break;
    }
    case kPayload: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_.payload_;
      }
      break;
    }
    case STREAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_NOT_SET;
}


void JournalRequestByte::Clear() {
// @@protoc_insertion_point(message_clear_start:journal_engine.JournalRequestByte)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JournalRequestByte::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .journal_engine.JournalRequest journal_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_journal_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .journal_engine.Payload payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JournalRequestByte::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:journal_engine.JournalRequestByte)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .journal_engine.JournalRequest journal_request = 1;
  if (_internal_has_journal_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::journal_request(this), target, stream);
  }

  // .journal_engine.Payload payload = 2;
  if (_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:journal_engine.JournalRequestByte)
  return target;
}

size_t JournalRequestByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:journal_engine.JournalRequestByte)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_case()) {
    // .journal_engine.JournalRequest journal_request = 1;
    case kJournalRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_.journal_request_);
      break;
    }
    // .journal_engine.Payload payload = 2;
    case kPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_.payload_);
      break;
    }
    case STREAM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JournalRequestByte::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JournalRequestByte::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JournalRequestByte::GetClassData() const { return &_class_data_; }

void JournalRequestByte::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JournalRequestByte *>(to)->MergeFrom(
      static_cast<const JournalRequestByte &>(from));
}


void JournalRequestByte::MergeFrom(const JournalRequestByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:journal_engine.JournalRequestByte)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_case()) {
    case kJournalRequest: {
      _internal_mutable_journal_request()->::journal_engine::JournalRequest::MergeFrom(from._internal_journal_request());
      break;
    }
    case kPayload: {
      _internal_mutable_payload()->::journal_engine::Payload::MergeFrom(from._internal_payload());
      break;
    }
    case STREAM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JournalRequestByte::CopyFrom(const JournalRequestByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:journal_engine.JournalRequestByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalRequestByte::IsInitialized() const {
  return true;
}

void JournalRequestByte::InternalSwap(JournalRequestByte* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stream_, other->stream_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JournalRequestByte::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_journal_2eproto_getter, &descriptor_table_journal_2eproto_once,
      file_level_metadata_journal_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace journal_engine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::journal_engine::JournalRequest* Arena::CreateMaybeMessage< ::journal_engine::JournalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::journal_engine::JournalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::journal_engine::Payload* Arena::CreateMaybeMessage< ::journal_engine::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::journal_engine::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::journal_engine::JournalProxying* Arena::CreateMaybeMessage< ::journal_engine::JournalProxying >(Arena* arena) {
  return Arena::CreateMessageInternal< ::journal_engine::JournalProxying >(arena);
}
template<> PROTOBUF_NOINLINE ::journal_engine::JournalReceipt* Arena::CreateMaybeMessage< ::journal_engine::JournalReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::journal_engine::JournalReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::journal_engine::JournalRequestByte* Arena::CreateMaybeMessage< ::journal_engine::JournalRequestByte >(Arena* arena) {
  return Arena::CreateMessageInternal< ::journal_engine::JournalRequestByte >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
