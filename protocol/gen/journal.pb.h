// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_journal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_journal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_journal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_journal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_journal_2eproto;
namespace journal_engine {
class JournalProxying;
struct JournalProxyingDefaultTypeInternal;
extern JournalProxyingDefaultTypeInternal _JournalProxying_default_instance_;
class JournalReceipt;
struct JournalReceiptDefaultTypeInternal;
extern JournalReceiptDefaultTypeInternal _JournalReceipt_default_instance_;
class JournalRequest;
struct JournalRequestDefaultTypeInternal;
extern JournalRequestDefaultTypeInternal _JournalRequest_default_instance_;
class JournalRequestByte;
struct JournalRequestByteDefaultTypeInternal;
extern JournalRequestByteDefaultTypeInternal _JournalRequestByte_default_instance_;
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
}  // namespace journal_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::journal_engine::JournalProxying* Arena::CreateMaybeMessage<::journal_engine::JournalProxying>(Arena*);
template<> ::journal_engine::JournalReceipt* Arena::CreateMaybeMessage<::journal_engine::JournalReceipt>(Arena*);
template<> ::journal_engine::JournalRequest* Arena::CreateMaybeMessage<::journal_engine::JournalRequest>(Arena*);
template<> ::journal_engine::JournalRequestByte* Arena::CreateMaybeMessage<::journal_engine::JournalRequestByte>(Arena*);
template<> ::journal_engine::Payload* Arena::CreateMaybeMessage<::journal_engine::Payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace journal_engine {

// ===================================================================

class JournalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:journal_engine.JournalRequest) */ {
 public:
  inline JournalRequest() : JournalRequest(nullptr) {}
  ~JournalRequest() override;
  explicit constexpr JournalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JournalRequest(const JournalRequest& from);
  JournalRequest(JournalRequest&& from) noexcept
    : JournalRequest() {
    *this = ::std::move(from);
  }

  inline JournalRequest& operator=(const JournalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JournalRequest& operator=(JournalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JournalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JournalRequest* internal_default_instance() {
    return reinterpret_cast<const JournalRequest*>(
               &_JournalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JournalRequest& a, JournalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JournalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JournalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JournalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JournalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JournalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JournalRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JournalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "journal_engine.JournalRequest";
  }
  protected:
  explicit JournalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 8,
    kClueFieldNumber = 9,
    kLedgerNameFieldNumber = 1,
    kPayloadNameFieldNumber = 3,
    kPayloadTypeFieldNumber = 5,
    kHashFieldNumber = 10,
    kJournalIdFieldNumber = 2,
    kPayloadSizeFieldNumber = 4,
    kNonceFieldNumber = 6,
    kTimestampFieldNumber = 7,
  };
  // repeated string sender = 8;
  int sender_size() const;
  private:
  int _internal_sender_size() const;
  public:
  void clear_sender();
  const std::string& sender(int index) const;
  std::string* mutable_sender(int index);
  void set_sender(int index, const std::string& value);
  void set_sender(int index, std::string&& value);
  void set_sender(int index, const char* value);
  void set_sender(int index, const char* value, size_t size);
  std::string* add_sender();
  void add_sender(const std::string& value);
  void add_sender(std::string&& value);
  void add_sender(const char* value);
  void add_sender(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sender() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sender();
  private:
  const std::string& _internal_sender(int index) const;
  std::string* _internal_add_sender();
  public:

  // repeated string clue = 9;
  int clue_size() const;
  private:
  int _internal_clue_size() const;
  public:
  void clear_clue();
  const std::string& clue(int index) const;
  std::string* mutable_clue(int index);
  void set_clue(int index, const std::string& value);
  void set_clue(int index, std::string&& value);
  void set_clue(int index, const char* value);
  void set_clue(int index, const char* value, size_t size);
  std::string* add_clue();
  void add_clue(const std::string& value);
  void add_clue(std::string&& value);
  void add_clue(const char* value);
  void add_clue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clue();
  private:
  const std::string& _internal_clue(int index) const;
  std::string* _internal_add_clue();
  public:

  // string ledger_name = 1;
  void clear_ledger_name();
  const std::string& ledger_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_name();
  PROTOBUF_NODISCARD std::string* release_ledger_name();
  void set_allocated_ledger_name(std::string* ledger_name);
  private:
  const std::string& _internal_ledger_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_name(const std::string& value);
  std::string* _internal_mutable_ledger_name();
  public:

  // string payload_name = 3;
  void clear_payload_name();
  const std::string& payload_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_name();
  PROTOBUF_NODISCARD std::string* release_payload_name();
  void set_allocated_payload_name(std::string* payload_name);
  private:
  const std::string& _internal_payload_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_name(const std::string& value);
  std::string* _internal_mutable_payload_name();
  public:

  // string payload_type = 5;
  void clear_payload_type();
  const std::string& payload_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_type();
  PROTOBUF_NODISCARD std::string* release_payload_type();
  void set_allocated_payload_type(std::string* payload_type);
  private:
  const std::string& _internal_payload_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_type(const std::string& value);
  std::string* _internal_mutable_payload_type();
  public:

  // bytes hash = 10;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 journal_id = 2;
  void clear_journal_id();
  uint64_t journal_id() const;
  void set_journal_id(uint64_t value);
  private:
  uint64_t _internal_journal_id() const;
  void _internal_set_journal_id(uint64_t value);
  public:

  // uint64 payload_size = 4;
  void clear_payload_size();
  uint64_t payload_size() const;
  void set_payload_size(uint64_t value);
  private:
  uint64_t _internal_payload_size() const;
  void _internal_set_payload_size(uint64_t value);
  public:

  // uint64 nonce = 6;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint64 timestamp = 7;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:journal_engine.JournalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sender_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint64_t journal_id_;
  uint64_t payload_size_;
  uint64_t nonce_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_journal_2eproto;
};
// -------------------------------------------------------------------

class Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:journal_engine.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  explicit constexpr Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "journal_engine.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:journal_engine.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_journal_2eproto;
};
// -------------------------------------------------------------------

class JournalProxying final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:journal_engine.JournalProxying) */ {
 public:
  inline JournalProxying() : JournalProxying(nullptr) {}
  ~JournalProxying() override;
  explicit constexpr JournalProxying(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JournalProxying(const JournalProxying& from);
  JournalProxying(JournalProxying&& from) noexcept
    : JournalProxying() {
    *this = ::std::move(from);
  }

  inline JournalProxying& operator=(const JournalProxying& from) {
    CopyFrom(from);
    return *this;
  }
  inline JournalProxying& operator=(JournalProxying&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JournalProxying& default_instance() {
    return *internal_default_instance();
  }
  static inline const JournalProxying* internal_default_instance() {
    return reinterpret_cast<const JournalProxying*>(
               &_JournalProxying_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JournalProxying& a, JournalProxying& b) {
    a.Swap(&b);
  }
  inline void Swap(JournalProxying* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JournalProxying* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JournalProxying* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JournalProxying>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JournalProxying& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JournalProxying& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JournalProxying* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "journal_engine.JournalProxying";
  }
  protected:
  explicit JournalProxying(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHashFieldNumber = 1,
    kHashFieldNumber = 10,
    kStreamIdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kJournalSizeFieldNumber = 4,
    kServerIdFieldNumber = 5,
    kServerTimestampFieldNumber = 6,
    kExecuteStatusFieldNumber = 7,
    kExecuteResultFieldNumber = 8,
    kRootHashStatusFieldNumber = 9,
  };
  // string request_hash = 1;
  void clear_request_hash();
  const std::string& request_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_hash();
  PROTOBUF_NODISCARD std::string* release_request_hash();
  void set_allocated_request_hash(std::string* request_hash);
  private:
  const std::string& _internal_request_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_hash(const std::string& value);
  std::string* _internal_mutable_request_hash();
  public:

  // bytes hash = 10;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 stream_id = 2;
  void clear_stream_id();
  uint64_t stream_id() const;
  void set_stream_id(uint64_t value);
  private:
  uint64_t _internal_stream_id() const;
  void _internal_set_stream_id(uint64_t value);
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 journal_size = 4;
  void clear_journal_size();
  uint64_t journal_size() const;
  void set_journal_size(uint64_t value);
  private:
  uint64_t _internal_journal_size() const;
  void _internal_set_journal_size(uint64_t value);
  public:

  // uint64 server_id = 5;
  void clear_server_id();
  uint64_t server_id() const;
  void set_server_id(uint64_t value);
  private:
  uint64_t _internal_server_id() const;
  void _internal_set_server_id(uint64_t value);
  public:

  // uint64 server_timestamp = 6;
  void clear_server_timestamp();
  uint64_t server_timestamp() const;
  void set_server_timestamp(uint64_t value);
  private:
  uint64_t _internal_server_timestamp() const;
  void _internal_set_server_timestamp(uint64_t value);
  public:

  // uint64 execute_status = 7;
  void clear_execute_status();
  uint64_t execute_status() const;
  void set_execute_status(uint64_t value);
  private:
  uint64_t _internal_execute_status() const;
  void _internal_set_execute_status(uint64_t value);
  public:

  // uint64 execute_result = 8;
  void clear_execute_result();
  uint64_t execute_result() const;
  void set_execute_result(uint64_t value);
  private:
  uint64_t _internal_execute_result() const;
  void _internal_set_execute_result(uint64_t value);
  public:

  // uint64 root_hash_status = 9;
  void clear_root_hash_status();
  uint64_t root_hash_status() const;
  void set_root_hash_status(uint64_t value);
  private:
  uint64_t _internal_root_hash_status() const;
  void _internal_set_root_hash_status(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:journal_engine.JournalProxying)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint64_t stream_id_;
  uint64_t offset_;
  uint64_t journal_size_;
  uint64_t server_id_;
  uint64_t server_timestamp_;
  uint64_t execute_status_;
  uint64_t execute_result_;
  uint64_t root_hash_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_journal_2eproto;
};
// -------------------------------------------------------------------

class JournalReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:journal_engine.JournalReceipt) */ {
 public:
  inline JournalReceipt() : JournalReceipt(nullptr) {}
  ~JournalReceipt() override;
  explicit constexpr JournalReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JournalReceipt(const JournalReceipt& from);
  JournalReceipt(JournalReceipt&& from) noexcept
    : JournalReceipt() {
    *this = ::std::move(from);
  }

  inline JournalReceipt& operator=(const JournalReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline JournalReceipt& operator=(JournalReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JournalReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const JournalReceipt* internal_default_instance() {
    return reinterpret_cast<const JournalReceipt*>(
               &_JournalReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JournalReceipt& a, JournalReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(JournalReceipt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JournalReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JournalReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JournalReceipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JournalReceipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JournalReceipt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JournalReceipt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "journal_engine.JournalReceipt";
  }
  protected:
  explicit JournalReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHashFieldNumber = 1,
    kProxyingHashFieldNumber = 2,
    kBlockHashFieldNumber = 3,
    kServerIdFieldNumber = 4,
    kServerTimestampFieldNumber = 5,
    kExecuteStatusFieldNumber = 6,
    kExecuteResultFieldNumber = 7,
  };
  // bytes request_hash = 1;
  void clear_request_hash();
  const std::string& request_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_hash();
  PROTOBUF_NODISCARD std::string* release_request_hash();
  void set_allocated_request_hash(std::string* request_hash);
  private:
  const std::string& _internal_request_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_hash(const std::string& value);
  std::string* _internal_mutable_request_hash();
  public:

  // bytes proxying_hash = 2;
  void clear_proxying_hash();
  const std::string& proxying_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxying_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxying_hash();
  PROTOBUF_NODISCARD std::string* release_proxying_hash();
  void set_allocated_proxying_hash(std::string* proxying_hash);
  private:
  const std::string& _internal_proxying_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxying_hash(const std::string& value);
  std::string* _internal_mutable_proxying_hash();
  public:

  // bytes block_hash = 3;
  void clear_block_hash();
  const std::string& block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // uint64 server_id = 4;
  void clear_server_id();
  uint64_t server_id() const;
  void set_server_id(uint64_t value);
  private:
  uint64_t _internal_server_id() const;
  void _internal_set_server_id(uint64_t value);
  public:

  // uint64 server_timestamp = 5;
  void clear_server_timestamp();
  uint64_t server_timestamp() const;
  void set_server_timestamp(uint64_t value);
  private:
  uint64_t _internal_server_timestamp() const;
  void _internal_set_server_timestamp(uint64_t value);
  public:

  // uint64 execute_status = 6;
  void clear_execute_status();
  uint64_t execute_status() const;
  void set_execute_status(uint64_t value);
  private:
  uint64_t _internal_execute_status() const;
  void _internal_set_execute_status(uint64_t value);
  public:

  // uint64 execute_result = 7;
  void clear_execute_result();
  uint64_t execute_result() const;
  void set_execute_result(uint64_t value);
  private:
  uint64_t _internal_execute_result() const;
  void _internal_set_execute_result(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:journal_engine.JournalReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxying_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  uint64_t server_id_;
  uint64_t server_timestamp_;
  uint64_t execute_status_;
  uint64_t execute_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_journal_2eproto;
};
// -------------------------------------------------------------------

class JournalRequestByte final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:journal_engine.JournalRequestByte) */ {
 public:
  inline JournalRequestByte() : JournalRequestByte(nullptr) {}
  ~JournalRequestByte() override;
  explicit constexpr JournalRequestByte(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JournalRequestByte(const JournalRequestByte& from);
  JournalRequestByte(JournalRequestByte&& from) noexcept
    : JournalRequestByte() {
    *this = ::std::move(from);
  }

  inline JournalRequestByte& operator=(const JournalRequestByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline JournalRequestByte& operator=(JournalRequestByte&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JournalRequestByte& default_instance() {
    return *internal_default_instance();
  }
  enum StreamCase {
    kJournalRequest = 1,
    kPayload = 2,
    STREAM_NOT_SET = 0,
  };

  static inline const JournalRequestByte* internal_default_instance() {
    return reinterpret_cast<const JournalRequestByte*>(
               &_JournalRequestByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JournalRequestByte& a, JournalRequestByte& b) {
    a.Swap(&b);
  }
  inline void Swap(JournalRequestByte* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JournalRequestByte* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JournalRequestByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JournalRequestByte>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JournalRequestByte& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JournalRequestByte& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JournalRequestByte* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "journal_engine.JournalRequestByte";
  }
  protected:
  explicit JournalRequestByte(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJournalRequestFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .journal_engine.JournalRequest journal_request = 1;
  bool has_journal_request() const;
  private:
  bool _internal_has_journal_request() const;
  public:
  void clear_journal_request();
  const ::journal_engine::JournalRequest& journal_request() const;
  PROTOBUF_NODISCARD ::journal_engine::JournalRequest* release_journal_request();
  ::journal_engine::JournalRequest* mutable_journal_request();
  void set_allocated_journal_request(::journal_engine::JournalRequest* journal_request);
  private:
  const ::journal_engine::JournalRequest& _internal_journal_request() const;
  ::journal_engine::JournalRequest* _internal_mutable_journal_request();
  public:
  void unsafe_arena_set_allocated_journal_request(
      ::journal_engine::JournalRequest* journal_request);
  ::journal_engine::JournalRequest* unsafe_arena_release_journal_request();

  // .journal_engine.Payload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::journal_engine::Payload& payload() const;
  PROTOBUF_NODISCARD ::journal_engine::Payload* release_payload();
  ::journal_engine::Payload* mutable_payload();
  void set_allocated_payload(::journal_engine::Payload* payload);
  private:
  const ::journal_engine::Payload& _internal_payload() const;
  ::journal_engine::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::journal_engine::Payload* payload);
  ::journal_engine::Payload* unsafe_arena_release_payload();

  void clear_stream();
  StreamCase stream_case() const;
  // @@protoc_insertion_point(class_scope:journal_engine.JournalRequestByte)
 private:
  class _Internal;
  void set_has_journal_request();
  void set_has_payload();

  inline bool has_stream() const;
  inline void clear_has_stream();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamUnion {
    constexpr StreamUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::journal_engine::JournalRequest* journal_request_;
    ::journal_engine::Payload* payload_;
  } stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_journal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JournalRequest

// string ledger_name = 1;
inline void JournalRequest::clear_ledger_name() {
  ledger_name_.ClearToEmpty();
}
inline const std::string& JournalRequest::ledger_name() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.ledger_name)
  return _internal_ledger_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalRequest::set_ledger_name(ArgT0&& arg0, ArgT... args) {
 
 ledger_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.ledger_name)
}
inline std::string* JournalRequest::mutable_ledger_name() {
  std::string* _s = _internal_mutable_ledger_name();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequest.ledger_name)
  return _s;
}
inline const std::string& JournalRequest::_internal_ledger_name() const {
  return ledger_name_.Get();
}
inline void JournalRequest::_internal_set_ledger_name(const std::string& value) {
  
  ledger_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalRequest::_internal_mutable_ledger_name() {
  
  return ledger_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalRequest::release_ledger_name() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalRequest.ledger_name)
  return ledger_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalRequest::set_allocated_ledger_name(std::string* ledger_name) {
  if (ledger_name != nullptr) {
    
  } else {
    
  }
  ledger_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledger_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ledger_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ledger_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalRequest.ledger_name)
}

// uint64 journal_id = 2;
inline void JournalRequest::clear_journal_id() {
  journal_id_ = uint64_t{0u};
}
inline uint64_t JournalRequest::_internal_journal_id() const {
  return journal_id_;
}
inline uint64_t JournalRequest::journal_id() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.journal_id)
  return _internal_journal_id();
}
inline void JournalRequest::_internal_set_journal_id(uint64_t value) {
  
  journal_id_ = value;
}
inline void JournalRequest::set_journal_id(uint64_t value) {
  _internal_set_journal_id(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.journal_id)
}

// string payload_name = 3;
inline void JournalRequest::clear_payload_name() {
  payload_name_.ClearToEmpty();
}
inline const std::string& JournalRequest::payload_name() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.payload_name)
  return _internal_payload_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalRequest::set_payload_name(ArgT0&& arg0, ArgT... args) {
 
 payload_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.payload_name)
}
inline std::string* JournalRequest::mutable_payload_name() {
  std::string* _s = _internal_mutable_payload_name();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequest.payload_name)
  return _s;
}
inline const std::string& JournalRequest::_internal_payload_name() const {
  return payload_name_.Get();
}
inline void JournalRequest::_internal_set_payload_name(const std::string& value) {
  
  payload_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalRequest::_internal_mutable_payload_name() {
  
  return payload_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalRequest::release_payload_name() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalRequest.payload_name)
  return payload_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalRequest::set_allocated_payload_name(std::string* payload_name) {
  if (payload_name != nullptr) {
    
  } else {
    
  }
  payload_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalRequest.payload_name)
}

// uint64 payload_size = 4;
inline void JournalRequest::clear_payload_size() {
  payload_size_ = uint64_t{0u};
}
inline uint64_t JournalRequest::_internal_payload_size() const {
  return payload_size_;
}
inline uint64_t JournalRequest::payload_size() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.payload_size)
  return _internal_payload_size();
}
inline void JournalRequest::_internal_set_payload_size(uint64_t value) {
  
  payload_size_ = value;
}
inline void JournalRequest::set_payload_size(uint64_t value) {
  _internal_set_payload_size(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.payload_size)
}

// string payload_type = 5;
inline void JournalRequest::clear_payload_type() {
  payload_type_.ClearToEmpty();
}
inline const std::string& JournalRequest::payload_type() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.payload_type)
  return _internal_payload_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalRequest::set_payload_type(ArgT0&& arg0, ArgT... args) {
 
 payload_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.payload_type)
}
inline std::string* JournalRequest::mutable_payload_type() {
  std::string* _s = _internal_mutable_payload_type();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequest.payload_type)
  return _s;
}
inline const std::string& JournalRequest::_internal_payload_type() const {
  return payload_type_.Get();
}
inline void JournalRequest::_internal_set_payload_type(const std::string& value) {
  
  payload_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalRequest::_internal_mutable_payload_type() {
  
  return payload_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalRequest::release_payload_type() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalRequest.payload_type)
  return payload_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalRequest::set_allocated_payload_type(std::string* payload_type) {
  if (payload_type != nullptr) {
    
  } else {
    
  }
  payload_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalRequest.payload_type)
}

// uint64 nonce = 6;
inline void JournalRequest::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t JournalRequest::_internal_nonce() const {
  return nonce_;
}
inline uint64_t JournalRequest::nonce() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.nonce)
  return _internal_nonce();
}
inline void JournalRequest::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void JournalRequest::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.nonce)
}

// uint64 timestamp = 7;
inline void JournalRequest::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t JournalRequest::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t JournalRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.timestamp)
  return _internal_timestamp();
}
inline void JournalRequest::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void JournalRequest::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.timestamp)
}

// repeated string sender = 8;
inline int JournalRequest::_internal_sender_size() const {
  return sender_.size();
}
inline int JournalRequest::sender_size() const {
  return _internal_sender_size();
}
inline void JournalRequest::clear_sender() {
  sender_.Clear();
}
inline std::string* JournalRequest::add_sender() {
  std::string* _s = _internal_add_sender();
  // @@protoc_insertion_point(field_add_mutable:journal_engine.JournalRequest.sender)
  return _s;
}
inline const std::string& JournalRequest::_internal_sender(int index) const {
  return sender_.Get(index);
}
inline const std::string& JournalRequest::sender(int index) const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.sender)
  return _internal_sender(index);
}
inline std::string* JournalRequest::mutable_sender(int index) {
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequest.sender)
  return sender_.Mutable(index);
}
inline void JournalRequest::set_sender(int index, const std::string& value) {
  sender_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.sender)
}
inline void JournalRequest::set_sender(int index, std::string&& value) {
  sender_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.sender)
}
inline void JournalRequest::set_sender(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sender_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:journal_engine.JournalRequest.sender)
}
inline void JournalRequest::set_sender(int index, const char* value, size_t size) {
  sender_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:journal_engine.JournalRequest.sender)
}
inline std::string* JournalRequest::_internal_add_sender() {
  return sender_.Add();
}
inline void JournalRequest::add_sender(const std::string& value) {
  sender_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:journal_engine.JournalRequest.sender)
}
inline void JournalRequest::add_sender(std::string&& value) {
  sender_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:journal_engine.JournalRequest.sender)
}
inline void JournalRequest::add_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sender_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:journal_engine.JournalRequest.sender)
}
inline void JournalRequest::add_sender(const char* value, size_t size) {
  sender_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:journal_engine.JournalRequest.sender)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JournalRequest::sender() const {
  // @@protoc_insertion_point(field_list:journal_engine.JournalRequest.sender)
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JournalRequest::mutable_sender() {
  // @@protoc_insertion_point(field_mutable_list:journal_engine.JournalRequest.sender)
  return &sender_;
}

// repeated string clue = 9;
inline int JournalRequest::_internal_clue_size() const {
  return clue_.size();
}
inline int JournalRequest::clue_size() const {
  return _internal_clue_size();
}
inline void JournalRequest::clear_clue() {
  clue_.Clear();
}
inline std::string* JournalRequest::add_clue() {
  std::string* _s = _internal_add_clue();
  // @@protoc_insertion_point(field_add_mutable:journal_engine.JournalRequest.clue)
  return _s;
}
inline const std::string& JournalRequest::_internal_clue(int index) const {
  return clue_.Get(index);
}
inline const std::string& JournalRequest::clue(int index) const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.clue)
  return _internal_clue(index);
}
inline std::string* JournalRequest::mutable_clue(int index) {
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequest.clue)
  return clue_.Mutable(index);
}
inline void JournalRequest::set_clue(int index, const std::string& value) {
  clue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.clue)
}
inline void JournalRequest::set_clue(int index, std::string&& value) {
  clue_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.clue)
}
inline void JournalRequest::set_clue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:journal_engine.JournalRequest.clue)
}
inline void JournalRequest::set_clue(int index, const char* value, size_t size) {
  clue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:journal_engine.JournalRequest.clue)
}
inline std::string* JournalRequest::_internal_add_clue() {
  return clue_.Add();
}
inline void JournalRequest::add_clue(const std::string& value) {
  clue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:journal_engine.JournalRequest.clue)
}
inline void JournalRequest::add_clue(std::string&& value) {
  clue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:journal_engine.JournalRequest.clue)
}
inline void JournalRequest::add_clue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:journal_engine.JournalRequest.clue)
}
inline void JournalRequest::add_clue(const char* value, size_t size) {
  clue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:journal_engine.JournalRequest.clue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JournalRequest::clue() const {
  // @@protoc_insertion_point(field_list:journal_engine.JournalRequest.clue)
  return clue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JournalRequest::mutable_clue() {
  // @@protoc_insertion_point(field_mutable_list:journal_engine.JournalRequest.clue)
  return &clue_;
}

// bytes hash = 10;
inline void JournalRequest::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& JournalRequest::hash() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequest.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalRequest::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalRequest.hash)
}
inline std::string* JournalRequest::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequest.hash)
  return _s;
}
inline const std::string& JournalRequest::_internal_hash() const {
  return hash_.Get();
}
inline void JournalRequest::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalRequest::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalRequest::release_hash() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalRequest.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalRequest.hash)
}

// -------------------------------------------------------------------

// Payload

// bytes data = 1;
inline void Payload::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Payload::data() const {
  // @@protoc_insertion_point(field_get:journal_engine.Payload.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.Payload.data)
}
inline std::string* Payload::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:journal_engine.Payload.data)
  return _s;
}
inline const std::string& Payload::_internal_data() const {
  return data_.Get();
}
inline void Payload::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_data() {
  // @@protoc_insertion_point(field_release:journal_engine.Payload.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.Payload.data)
}

// -------------------------------------------------------------------

// JournalProxying

// string request_hash = 1;
inline void JournalProxying::clear_request_hash() {
  request_hash_.ClearToEmpty();
}
inline const std::string& JournalProxying::request_hash() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.request_hash)
  return _internal_request_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalProxying::set_request_hash(ArgT0&& arg0, ArgT... args) {
 
 request_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.request_hash)
}
inline std::string* JournalProxying::mutable_request_hash() {
  std::string* _s = _internal_mutable_request_hash();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalProxying.request_hash)
  return _s;
}
inline const std::string& JournalProxying::_internal_request_hash() const {
  return request_hash_.Get();
}
inline void JournalProxying::_internal_set_request_hash(const std::string& value) {
  
  request_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalProxying::_internal_mutable_request_hash() {
  
  return request_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalProxying::release_request_hash() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalProxying.request_hash)
  return request_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalProxying::set_allocated_request_hash(std::string* request_hash) {
  if (request_hash != nullptr) {
    
  } else {
    
  }
  request_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalProxying.request_hash)
}

// uint64 stream_id = 2;
inline void JournalProxying::clear_stream_id() {
  stream_id_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_stream_id() const {
  return stream_id_;
}
inline uint64_t JournalProxying::stream_id() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.stream_id)
  return _internal_stream_id();
}
inline void JournalProxying::_internal_set_stream_id(uint64_t value) {
  
  stream_id_ = value;
}
inline void JournalProxying::set_stream_id(uint64_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.stream_id)
}

// uint64 offset = 3;
inline void JournalProxying::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_offset() const {
  return offset_;
}
inline uint64_t JournalProxying::offset() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.offset)
  return _internal_offset();
}
inline void JournalProxying::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void JournalProxying::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.offset)
}

// uint64 journal_size = 4;
inline void JournalProxying::clear_journal_size() {
  journal_size_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_journal_size() const {
  return journal_size_;
}
inline uint64_t JournalProxying::journal_size() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.journal_size)
  return _internal_journal_size();
}
inline void JournalProxying::_internal_set_journal_size(uint64_t value) {
  
  journal_size_ = value;
}
inline void JournalProxying::set_journal_size(uint64_t value) {
  _internal_set_journal_size(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.journal_size)
}

// uint64 server_id = 5;
inline void JournalProxying::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_server_id() const {
  return server_id_;
}
inline uint64_t JournalProxying::server_id() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.server_id)
  return _internal_server_id();
}
inline void JournalProxying::_internal_set_server_id(uint64_t value) {
  
  server_id_ = value;
}
inline void JournalProxying::set_server_id(uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.server_id)
}

// uint64 server_timestamp = 6;
inline void JournalProxying::clear_server_timestamp() {
  server_timestamp_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_server_timestamp() const {
  return server_timestamp_;
}
inline uint64_t JournalProxying::server_timestamp() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.server_timestamp)
  return _internal_server_timestamp();
}
inline void JournalProxying::_internal_set_server_timestamp(uint64_t value) {
  
  server_timestamp_ = value;
}
inline void JournalProxying::set_server_timestamp(uint64_t value) {
  _internal_set_server_timestamp(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.server_timestamp)
}

// uint64 execute_status = 7;
inline void JournalProxying::clear_execute_status() {
  execute_status_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_execute_status() const {
  return execute_status_;
}
inline uint64_t JournalProxying::execute_status() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.execute_status)
  return _internal_execute_status();
}
inline void JournalProxying::_internal_set_execute_status(uint64_t value) {
  
  execute_status_ = value;
}
inline void JournalProxying::set_execute_status(uint64_t value) {
  _internal_set_execute_status(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.execute_status)
}

// uint64 execute_result = 8;
inline void JournalProxying::clear_execute_result() {
  execute_result_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_execute_result() const {
  return execute_result_;
}
inline uint64_t JournalProxying::execute_result() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.execute_result)
  return _internal_execute_result();
}
inline void JournalProxying::_internal_set_execute_result(uint64_t value) {
  
  execute_result_ = value;
}
inline void JournalProxying::set_execute_result(uint64_t value) {
  _internal_set_execute_result(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.execute_result)
}

// uint64 root_hash_status = 9;
inline void JournalProxying::clear_root_hash_status() {
  root_hash_status_ = uint64_t{0u};
}
inline uint64_t JournalProxying::_internal_root_hash_status() const {
  return root_hash_status_;
}
inline uint64_t JournalProxying::root_hash_status() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.root_hash_status)
  return _internal_root_hash_status();
}
inline void JournalProxying::_internal_set_root_hash_status(uint64_t value) {
  
  root_hash_status_ = value;
}
inline void JournalProxying::set_root_hash_status(uint64_t value) {
  _internal_set_root_hash_status(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.root_hash_status)
}

// bytes hash = 10;
inline void JournalProxying::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& JournalProxying::hash() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalProxying.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalProxying::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalProxying.hash)
}
inline std::string* JournalProxying::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalProxying.hash)
  return _s;
}
inline const std::string& JournalProxying::_internal_hash() const {
  return hash_.Get();
}
inline void JournalProxying::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalProxying::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalProxying::release_hash() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalProxying.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalProxying::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalProxying.hash)
}

// -------------------------------------------------------------------

// JournalReceipt

// bytes request_hash = 1;
inline void JournalReceipt::clear_request_hash() {
  request_hash_.ClearToEmpty();
}
inline const std::string& JournalReceipt::request_hash() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.request_hash)
  return _internal_request_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalReceipt::set_request_hash(ArgT0&& arg0, ArgT... args) {
 
 request_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.request_hash)
}
inline std::string* JournalReceipt::mutable_request_hash() {
  std::string* _s = _internal_mutable_request_hash();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalReceipt.request_hash)
  return _s;
}
inline const std::string& JournalReceipt::_internal_request_hash() const {
  return request_hash_.Get();
}
inline void JournalReceipt::_internal_set_request_hash(const std::string& value) {
  
  request_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalReceipt::_internal_mutable_request_hash() {
  
  return request_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalReceipt::release_request_hash() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalReceipt.request_hash)
  return request_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalReceipt::set_allocated_request_hash(std::string* request_hash) {
  if (request_hash != nullptr) {
    
  } else {
    
  }
  request_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalReceipt.request_hash)
}

// bytes proxying_hash = 2;
inline void JournalReceipt::clear_proxying_hash() {
  proxying_hash_.ClearToEmpty();
}
inline const std::string& JournalReceipt::proxying_hash() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.proxying_hash)
  return _internal_proxying_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalReceipt::set_proxying_hash(ArgT0&& arg0, ArgT... args) {
 
 proxying_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.proxying_hash)
}
inline std::string* JournalReceipt::mutable_proxying_hash() {
  std::string* _s = _internal_mutable_proxying_hash();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalReceipt.proxying_hash)
  return _s;
}
inline const std::string& JournalReceipt::_internal_proxying_hash() const {
  return proxying_hash_.Get();
}
inline void JournalReceipt::_internal_set_proxying_hash(const std::string& value) {
  
  proxying_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalReceipt::_internal_mutable_proxying_hash() {
  
  return proxying_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalReceipt::release_proxying_hash() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalReceipt.proxying_hash)
  return proxying_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalReceipt::set_allocated_proxying_hash(std::string* proxying_hash) {
  if (proxying_hash != nullptr) {
    
  } else {
    
  }
  proxying_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxying_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxying_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxying_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalReceipt.proxying_hash)
}

// bytes block_hash = 3;
inline void JournalReceipt::clear_block_hash() {
  block_hash_.ClearToEmpty();
}
inline const std::string& JournalReceipt::block_hash() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.block_hash)
  return _internal_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JournalReceipt::set_block_hash(ArgT0&& arg0, ArgT... args) {
 
 block_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.block_hash)
}
inline std::string* JournalReceipt::mutable_block_hash() {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalReceipt.block_hash)
  return _s;
}
inline const std::string& JournalReceipt::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void JournalReceipt::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JournalReceipt::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JournalReceipt::release_block_hash() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalReceipt.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JournalReceipt::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:journal_engine.JournalReceipt.block_hash)
}

// uint64 server_id = 4;
inline void JournalReceipt::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline uint64_t JournalReceipt::_internal_server_id() const {
  return server_id_;
}
inline uint64_t JournalReceipt::server_id() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.server_id)
  return _internal_server_id();
}
inline void JournalReceipt::_internal_set_server_id(uint64_t value) {
  
  server_id_ = value;
}
inline void JournalReceipt::set_server_id(uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.server_id)
}

// uint64 server_timestamp = 5;
inline void JournalReceipt::clear_server_timestamp() {
  server_timestamp_ = uint64_t{0u};
}
inline uint64_t JournalReceipt::_internal_server_timestamp() const {
  return server_timestamp_;
}
inline uint64_t JournalReceipt::server_timestamp() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.server_timestamp)
  return _internal_server_timestamp();
}
inline void JournalReceipt::_internal_set_server_timestamp(uint64_t value) {
  
  server_timestamp_ = value;
}
inline void JournalReceipt::set_server_timestamp(uint64_t value) {
  _internal_set_server_timestamp(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.server_timestamp)
}

// uint64 execute_status = 6;
inline void JournalReceipt::clear_execute_status() {
  execute_status_ = uint64_t{0u};
}
inline uint64_t JournalReceipt::_internal_execute_status() const {
  return execute_status_;
}
inline uint64_t JournalReceipt::execute_status() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.execute_status)
  return _internal_execute_status();
}
inline void JournalReceipt::_internal_set_execute_status(uint64_t value) {
  
  execute_status_ = value;
}
inline void JournalReceipt::set_execute_status(uint64_t value) {
  _internal_set_execute_status(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.execute_status)
}

// uint64 execute_result = 7;
inline void JournalReceipt::clear_execute_result() {
  execute_result_ = uint64_t{0u};
}
inline uint64_t JournalReceipt::_internal_execute_result() const {
  return execute_result_;
}
inline uint64_t JournalReceipt::execute_result() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalReceipt.execute_result)
  return _internal_execute_result();
}
inline void JournalReceipt::_internal_set_execute_result(uint64_t value) {
  
  execute_result_ = value;
}
inline void JournalReceipt::set_execute_result(uint64_t value) {
  _internal_set_execute_result(value);
  // @@protoc_insertion_point(field_set:journal_engine.JournalReceipt.execute_result)
}

// -------------------------------------------------------------------

// JournalRequestByte

// .journal_engine.JournalRequest journal_request = 1;
inline bool JournalRequestByte::_internal_has_journal_request() const {
  return stream_case() == kJournalRequest;
}
inline bool JournalRequestByte::has_journal_request() const {
  return _internal_has_journal_request();
}
inline void JournalRequestByte::set_has_journal_request() {
  _oneof_case_[0] = kJournalRequest;
}
inline void JournalRequestByte::clear_journal_request() {
  if (_internal_has_journal_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stream_.journal_request_;
    }
    clear_has_stream();
  }
}
inline ::journal_engine::JournalRequest* JournalRequestByte::release_journal_request() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalRequestByte.journal_request)
  if (_internal_has_journal_request()) {
    clear_has_stream();
      ::journal_engine::JournalRequest* temp = stream_.journal_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_.journal_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::journal_engine::JournalRequest& JournalRequestByte::_internal_journal_request() const {
  return _internal_has_journal_request()
      ? *stream_.journal_request_
      : reinterpret_cast< ::journal_engine::JournalRequest&>(::journal_engine::_JournalRequest_default_instance_);
}
inline const ::journal_engine::JournalRequest& JournalRequestByte::journal_request() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequestByte.journal_request)
  return _internal_journal_request();
}
inline ::journal_engine::JournalRequest* JournalRequestByte::unsafe_arena_release_journal_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:journal_engine.JournalRequestByte.journal_request)
  if (_internal_has_journal_request()) {
    clear_has_stream();
    ::journal_engine::JournalRequest* temp = stream_.journal_request_;
    stream_.journal_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JournalRequestByte::unsafe_arena_set_allocated_journal_request(::journal_engine::JournalRequest* journal_request) {
  clear_stream();
  if (journal_request) {
    set_has_journal_request();
    stream_.journal_request_ = journal_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:journal_engine.JournalRequestByte.journal_request)
}
inline ::journal_engine::JournalRequest* JournalRequestByte::_internal_mutable_journal_request() {
  if (!_internal_has_journal_request()) {
    clear_stream();
    set_has_journal_request();
    stream_.journal_request_ = CreateMaybeMessage< ::journal_engine::JournalRequest >(GetArenaForAllocation());
  }
  return stream_.journal_request_;
}
inline ::journal_engine::JournalRequest* JournalRequestByte::mutable_journal_request() {
  ::journal_engine::JournalRequest* _msg = _internal_mutable_journal_request();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequestByte.journal_request)
  return _msg;
}

// .journal_engine.Payload payload = 2;
inline bool JournalRequestByte::_internal_has_payload() const {
  return stream_case() == kPayload;
}
inline bool JournalRequestByte::has_payload() const {
  return _internal_has_payload();
}
inline void JournalRequestByte::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline void JournalRequestByte::clear_payload() {
  if (_internal_has_payload()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stream_.payload_;
    }
    clear_has_stream();
  }
}
inline ::journal_engine::Payload* JournalRequestByte::release_payload() {
  // @@protoc_insertion_point(field_release:journal_engine.JournalRequestByte.payload)
  if (_internal_has_payload()) {
    clear_has_stream();
      ::journal_engine::Payload* temp = stream_.payload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::journal_engine::Payload& JournalRequestByte::_internal_payload() const {
  return _internal_has_payload()
      ? *stream_.payload_
      : reinterpret_cast< ::journal_engine::Payload&>(::journal_engine::_Payload_default_instance_);
}
inline const ::journal_engine::Payload& JournalRequestByte::payload() const {
  // @@protoc_insertion_point(field_get:journal_engine.JournalRequestByte.payload)
  return _internal_payload();
}
inline ::journal_engine::Payload* JournalRequestByte::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:journal_engine.JournalRequestByte.payload)
  if (_internal_has_payload()) {
    clear_has_stream();
    ::journal_engine::Payload* temp = stream_.payload_;
    stream_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JournalRequestByte::unsafe_arena_set_allocated_payload(::journal_engine::Payload* payload) {
  clear_stream();
  if (payload) {
    set_has_payload();
    stream_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:journal_engine.JournalRequestByte.payload)
}
inline ::journal_engine::Payload* JournalRequestByte::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_stream();
    set_has_payload();
    stream_.payload_ = CreateMaybeMessage< ::journal_engine::Payload >(GetArenaForAllocation());
  }
  return stream_.payload_;
}
inline ::journal_engine::Payload* JournalRequestByte::mutable_payload() {
  ::journal_engine::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:journal_engine.JournalRequestByte.payload)
  return _msg;
}

inline bool JournalRequestByte::has_stream() const {
  return stream_case() != STREAM_NOT_SET;
}
inline void JournalRequestByte::clear_has_stream() {
  _oneof_case_[0] = STREAM_NOT_SET;
}
inline JournalRequestByte::StreamCase JournalRequestByte::stream_case() const {
  return JournalRequestByte::StreamCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace journal_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_journal_2eproto
