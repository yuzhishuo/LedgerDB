// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ledger_engine.proto

#include "ledger_engine.pb.h"
#include "ledger_engine.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ledger_engine {

static const char* LedgerService_method_names[] = {
  "/ledger_engine.LedgerService/CreateLedger",
};

std::unique_ptr< LedgerService::Stub> LedgerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LedgerService::Stub> stub(new LedgerService::Stub(channel, options));
  return stub;
}

LedgerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateLedger_(LedgerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LedgerService::Stub::CreateLedger(::grpc::ClientContext* context, const ::ledger_engine::CreateLedgerRequest& request, ::ledger_engine::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ledger_engine::CreateLedgerRequest, ::ledger_engine::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateLedger_, context, request, response);
}

void LedgerService::Stub::async::CreateLedger(::grpc::ClientContext* context, const ::ledger_engine::CreateLedgerRequest* request, ::ledger_engine::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ledger_engine::CreateLedgerRequest, ::ledger_engine::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLedger_, context, request, response, std::move(f));
}

void LedgerService::Stub::async::CreateLedger(::grpc::ClientContext* context, const ::ledger_engine::CreateLedgerRequest* request, ::ledger_engine::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateLedger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ledger_engine::Response>* LedgerService::Stub::PrepareAsyncCreateLedgerRaw(::grpc::ClientContext* context, const ::ledger_engine::CreateLedgerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ledger_engine::Response, ::ledger_engine::CreateLedgerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateLedger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ledger_engine::Response>* LedgerService::Stub::AsyncCreateLedgerRaw(::grpc::ClientContext* context, const ::ledger_engine::CreateLedgerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateLedgerRaw(context, request, cq);
  result->StartCall();
  return result;
}

LedgerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LedgerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LedgerService::Service, ::ledger_engine::CreateLedgerRequest, ::ledger_engine::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LedgerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ledger_engine::CreateLedgerRequest* req,
             ::ledger_engine::Response* resp) {
               return service->CreateLedger(ctx, req, resp);
             }, this)));
}

LedgerService::Service::~Service() {
}

::grpc::Status LedgerService::Service::CreateLedger(::grpc::ServerContext* context, const ::ledger_engine::CreateLedgerRequest* request, ::ledger_engine::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ledger_engine

