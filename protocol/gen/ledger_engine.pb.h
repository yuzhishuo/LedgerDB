// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ledger_engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ledger_5fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ledger_5fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ledger_5fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ledger_5fengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ledger_5fengine_2eproto;
namespace ledger_engine {
class CreateLedgerRequest;
struct CreateLedgerRequestDefaultTypeInternal;
extern CreateLedgerRequestDefaultTypeInternal _CreateLedgerRequest_default_instance_;
class Ledger;
struct LedgerDefaultTypeInternal;
extern LedgerDefaultTypeInternal _Ledger_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace ledger_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::ledger_engine::CreateLedgerRequest* Arena::CreateMaybeMessage<::ledger_engine::CreateLedgerRequest>(Arena*);
template<> ::ledger_engine::Ledger* Arena::CreateMaybeMessage<::ledger_engine::Ledger>(Arena*);
template<> ::ledger_engine::Response* Arena::CreateMaybeMessage<::ledger_engine::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ledger_engine {

// ===================================================================

class Ledger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ledger_engine.Ledger) */ {
 public:
  inline Ledger() : Ledger(nullptr) {}
  ~Ledger() override;
  explicit constexpr Ledger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ledger(const Ledger& from);
  Ledger(Ledger&& from) noexcept
    : Ledger() {
    *this = ::std::move(from);
  }

  inline Ledger& operator=(const Ledger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ledger& operator=(Ledger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ledger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ledger* internal_default_instance() {
    return reinterpret_cast<const Ledger*>(
               &_Ledger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ledger& a, Ledger& b) {
    a.Swap(&b);
  }
  inline void Swap(Ledger* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ledger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ledger* New() const final {
    return new Ledger();
  }

  Ledger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ledger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ledger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ledger& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ledger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ledger_engine.Ledger";
  }
  protected:
  explicit Ledger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonsFieldNumber = 5,
    kReadonlysFieldNumber = 6,
    kNameFieldNumber = 1,
    kOnwerFieldNumber = 3,
    kRegulatorFieldNumber = 4,
    kIdFieldNumber = 2,
  };
  // repeated string Commons = 5;
  int commons_size() const;
  private:
  int _internal_commons_size() const;
  public:
  void clear_commons();
  const std::string& commons(int index) const;
  std::string* mutable_commons(int index);
  void set_commons(int index, const std::string& value);
  void set_commons(int index, std::string&& value);
  void set_commons(int index, const char* value);
  void set_commons(int index, const char* value, size_t size);
  std::string* add_commons();
  void add_commons(const std::string& value);
  void add_commons(std::string&& value);
  void add_commons(const char* value);
  void add_commons(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& commons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_commons();
  private:
  const std::string& _internal_commons(int index) const;
  std::string* _internal_add_commons();
  public:

  // repeated string Readonlys = 6;
  int readonlys_size() const;
  private:
  int _internal_readonlys_size() const;
  public:
  void clear_readonlys();
  const std::string& readonlys(int index) const;
  std::string* mutable_readonlys(int index);
  void set_readonlys(int index, const std::string& value);
  void set_readonlys(int index, std::string&& value);
  void set_readonlys(int index, const char* value);
  void set_readonlys(int index, const char* value, size_t size);
  std::string* add_readonlys();
  void add_readonlys(const std::string& value);
  void add_readonlys(std::string&& value);
  void add_readonlys(const char* value);
  void add_readonlys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& readonlys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_readonlys();
  private:
  const std::string& _internal_readonlys(int index) const;
  std::string* _internal_add_readonlys();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Onwer = 3;
  void clear_onwer();
  const std::string& onwer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onwer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onwer();
  PROTOBUF_MUST_USE_RESULT std::string* release_onwer();
  void set_allocated_onwer(std::string* onwer);
  private:
  const std::string& _internal_onwer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onwer(const std::string& value);
  std::string* _internal_mutable_onwer();
  public:

  // string Regulator = 4;
  void clear_regulator();
  const std::string& regulator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_regulator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_regulator();
  PROTOBUF_MUST_USE_RESULT std::string* release_regulator();
  void set_allocated_regulator(std::string* regulator);
  private:
  const std::string& _internal_regulator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regulator(const std::string& value);
  std::string* _internal_mutable_regulator();
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ledger_engine.Ledger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> commons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> readonlys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onwer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regulator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ledger_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ledger_engine.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ledger_engine.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ledger_engine.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ledger_5fengine_2eproto;
};
// -------------------------------------------------------------------

class CreateLedgerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ledger_engine.CreateLedgerRequest) */ {
 public:
  inline CreateLedgerRequest() : CreateLedgerRequest(nullptr) {}
  ~CreateLedgerRequest() override;
  explicit constexpr CreateLedgerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLedgerRequest(const CreateLedgerRequest& from);
  CreateLedgerRequest(CreateLedgerRequest&& from) noexcept
    : CreateLedgerRequest() {
    *this = ::std::move(from);
  }

  inline CreateLedgerRequest& operator=(const CreateLedgerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLedgerRequest& operator=(CreateLedgerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLedgerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLedgerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLedgerRequest*>(
               &_CreateLedgerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateLedgerRequest& a, CreateLedgerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLedgerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLedgerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLedgerRequest* New() const final {
    return new CreateLedgerRequest();
  }

  CreateLedgerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLedgerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLedgerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateLedgerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLedgerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ledger_engine.CreateLedgerRequest";
  }
  protected:
  explicit CreateLedgerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLedgerNameFieldNumber = 1,
  };
  // string ledgerName = 1;
  void clear_ledgername();
  const std::string& ledgername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledgername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledgername();
  PROTOBUF_MUST_USE_RESULT std::string* release_ledgername();
  void set_allocated_ledgername(std::string* ledgername);
  private:
  const std::string& _internal_ledgername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledgername(const std::string& value);
  std::string* _internal_mutable_ledgername();
  public:

  // @@protoc_insertion_point(class_scope:ledger_engine.CreateLedgerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledgername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ledger_5fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ledger

// string name = 1;
inline void Ledger::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Ledger::name() const {
  // @@protoc_insertion_point(field_get:ledger_engine.Ledger.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ledger::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.name)
}
inline std::string* Ledger::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ledger_engine.Ledger.name)
  return _s;
}
inline const std::string& Ledger::_internal_name() const {
  return name_.Get();
}
inline void Ledger::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ledger::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ledger::release_name() {
  // @@protoc_insertion_point(field_release:ledger_engine.Ledger.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ledger::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ledger_engine.Ledger.name)
}

// uint32 id = 2;
inline void Ledger::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ledger::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ledger::id() const {
  // @@protoc_insertion_point(field_get:ledger_engine.Ledger.id)
  return _internal_id();
}
inline void Ledger::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Ledger::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.id)
}

// string Onwer = 3;
inline void Ledger::clear_onwer() {
  onwer_.ClearToEmpty();
}
inline const std::string& Ledger::onwer() const {
  // @@protoc_insertion_point(field_get:ledger_engine.Ledger.Onwer)
  return _internal_onwer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ledger::set_onwer(ArgT0&& arg0, ArgT... args) {
 
 onwer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.Onwer)
}
inline std::string* Ledger::mutable_onwer() {
  std::string* _s = _internal_mutable_onwer();
  // @@protoc_insertion_point(field_mutable:ledger_engine.Ledger.Onwer)
  return _s;
}
inline const std::string& Ledger::_internal_onwer() const {
  return onwer_.Get();
}
inline void Ledger::_internal_set_onwer(const std::string& value) {
  
  onwer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ledger::_internal_mutable_onwer() {
  
  return onwer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ledger::release_onwer() {
  // @@protoc_insertion_point(field_release:ledger_engine.Ledger.Onwer)
  return onwer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ledger::set_allocated_onwer(std::string* onwer) {
  if (onwer != nullptr) {
    
  } else {
    
  }
  onwer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onwer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ledger_engine.Ledger.Onwer)
}

// string Regulator = 4;
inline void Ledger::clear_regulator() {
  regulator_.ClearToEmpty();
}
inline const std::string& Ledger::regulator() const {
  // @@protoc_insertion_point(field_get:ledger_engine.Ledger.Regulator)
  return _internal_regulator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ledger::set_regulator(ArgT0&& arg0, ArgT... args) {
 
 regulator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.Regulator)
}
inline std::string* Ledger::mutable_regulator() {
  std::string* _s = _internal_mutable_regulator();
  // @@protoc_insertion_point(field_mutable:ledger_engine.Ledger.Regulator)
  return _s;
}
inline const std::string& Ledger::_internal_regulator() const {
  return regulator_.Get();
}
inline void Ledger::_internal_set_regulator(const std::string& value) {
  
  regulator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ledger::_internal_mutable_regulator() {
  
  return regulator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ledger::release_regulator() {
  // @@protoc_insertion_point(field_release:ledger_engine.Ledger.Regulator)
  return regulator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ledger::set_allocated_regulator(std::string* regulator) {
  if (regulator != nullptr) {
    
  } else {
    
  }
  regulator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regulator,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ledger_engine.Ledger.Regulator)
}

// repeated string Commons = 5;
inline int Ledger::_internal_commons_size() const {
  return commons_.size();
}
inline int Ledger::commons_size() const {
  return _internal_commons_size();
}
inline void Ledger::clear_commons() {
  commons_.Clear();
}
inline std::string* Ledger::add_commons() {
  std::string* _s = _internal_add_commons();
  // @@protoc_insertion_point(field_add_mutable:ledger_engine.Ledger.Commons)
  return _s;
}
inline const std::string& Ledger::_internal_commons(int index) const {
  return commons_.Get(index);
}
inline const std::string& Ledger::commons(int index) const {
  // @@protoc_insertion_point(field_get:ledger_engine.Ledger.Commons)
  return _internal_commons(index);
}
inline std::string* Ledger::mutable_commons(int index) {
  // @@protoc_insertion_point(field_mutable:ledger_engine.Ledger.Commons)
  return commons_.Mutable(index);
}
inline void Ledger::set_commons(int index, const std::string& value) {
  commons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.Commons)
}
inline void Ledger::set_commons(int index, std::string&& value) {
  commons_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.Commons)
}
inline void Ledger::set_commons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ledger_engine.Ledger.Commons)
}
inline void Ledger::set_commons(int index, const char* value, size_t size) {
  commons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ledger_engine.Ledger.Commons)
}
inline std::string* Ledger::_internal_add_commons() {
  return commons_.Add();
}
inline void Ledger::add_commons(const std::string& value) {
  commons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ledger_engine.Ledger.Commons)
}
inline void Ledger::add_commons(std::string&& value) {
  commons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ledger_engine.Ledger.Commons)
}
inline void Ledger::add_commons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ledger_engine.Ledger.Commons)
}
inline void Ledger::add_commons(const char* value, size_t size) {
  commons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ledger_engine.Ledger.Commons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Ledger::commons() const {
  // @@protoc_insertion_point(field_list:ledger_engine.Ledger.Commons)
  return commons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Ledger::mutable_commons() {
  // @@protoc_insertion_point(field_mutable_list:ledger_engine.Ledger.Commons)
  return &commons_;
}

// repeated string Readonlys = 6;
inline int Ledger::_internal_readonlys_size() const {
  return readonlys_.size();
}
inline int Ledger::readonlys_size() const {
  return _internal_readonlys_size();
}
inline void Ledger::clear_readonlys() {
  readonlys_.Clear();
}
inline std::string* Ledger::add_readonlys() {
  std::string* _s = _internal_add_readonlys();
  // @@protoc_insertion_point(field_add_mutable:ledger_engine.Ledger.Readonlys)
  return _s;
}
inline const std::string& Ledger::_internal_readonlys(int index) const {
  return readonlys_.Get(index);
}
inline const std::string& Ledger::readonlys(int index) const {
  // @@protoc_insertion_point(field_get:ledger_engine.Ledger.Readonlys)
  return _internal_readonlys(index);
}
inline std::string* Ledger::mutable_readonlys(int index) {
  // @@protoc_insertion_point(field_mutable:ledger_engine.Ledger.Readonlys)
  return readonlys_.Mutable(index);
}
inline void Ledger::set_readonlys(int index, const std::string& value) {
  readonlys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.Readonlys)
}
inline void Ledger::set_readonlys(int index, std::string&& value) {
  readonlys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ledger_engine.Ledger.Readonlys)
}
inline void Ledger::set_readonlys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readonlys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ledger_engine.Ledger.Readonlys)
}
inline void Ledger::set_readonlys(int index, const char* value, size_t size) {
  readonlys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ledger_engine.Ledger.Readonlys)
}
inline std::string* Ledger::_internal_add_readonlys() {
  return readonlys_.Add();
}
inline void Ledger::add_readonlys(const std::string& value) {
  readonlys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ledger_engine.Ledger.Readonlys)
}
inline void Ledger::add_readonlys(std::string&& value) {
  readonlys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ledger_engine.Ledger.Readonlys)
}
inline void Ledger::add_readonlys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readonlys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ledger_engine.Ledger.Readonlys)
}
inline void Ledger::add_readonlys(const char* value, size_t size) {
  readonlys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ledger_engine.Ledger.Readonlys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Ledger::readonlys() const {
  // @@protoc_insertion_point(field_list:ledger_engine.Ledger.Readonlys)
  return readonlys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Ledger::mutable_readonlys() {
  // @@protoc_insertion_point(field_mutable_list:ledger_engine.Ledger.Readonlys)
  return &readonlys_;
}

// -------------------------------------------------------------------

// Response

// string message = 1;
inline void Response::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:ledger_engine.Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ledger_engine.Response.message)
}
inline std::string* Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ledger_engine.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:ledger_engine.Response.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ledger_engine.Response.message)
}

// bool success = 2;
inline void Response::clear_success() {
  success_ = false;
}
inline bool Response::_internal_success() const {
  return success_;
}
inline bool Response::success() const {
  // @@protoc_insertion_point(field_get:ledger_engine.Response.success)
  return _internal_success();
}
inline void Response::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ledger_engine.Response.success)
}

// -------------------------------------------------------------------

// CreateLedgerRequest

// string ledgerName = 1;
inline void CreateLedgerRequest::clear_ledgername() {
  ledgername_.ClearToEmpty();
}
inline const std::string& CreateLedgerRequest::ledgername() const {
  // @@protoc_insertion_point(field_get:ledger_engine.CreateLedgerRequest.ledgerName)
  return _internal_ledgername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLedgerRequest::set_ledgername(ArgT0&& arg0, ArgT... args) {
 
 ledgername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ledger_engine.CreateLedgerRequest.ledgerName)
}
inline std::string* CreateLedgerRequest::mutable_ledgername() {
  std::string* _s = _internal_mutable_ledgername();
  // @@protoc_insertion_point(field_mutable:ledger_engine.CreateLedgerRequest.ledgerName)
  return _s;
}
inline const std::string& CreateLedgerRequest::_internal_ledgername() const {
  return ledgername_.Get();
}
inline void CreateLedgerRequest::_internal_set_ledgername(const std::string& value) {
  
  ledgername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateLedgerRequest::_internal_mutable_ledgername() {
  
  return ledgername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateLedgerRequest::release_ledgername() {
  // @@protoc_insertion_point(field_release:ledger_engine.CreateLedgerRequest.ledgerName)
  return ledgername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateLedgerRequest::set_allocated_ledgername(std::string* ledgername) {
  if (ledgername != nullptr) {
    
  } else {
    
  }
  ledgername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ledgername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ledger_engine.CreateLedgerRequest.ledgerName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ledger_engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ledger_5fengine_2eproto
