// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace raft {
constexpr Node::Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : udata_(nullptr)
  , next_idx_(int64_t{0})
  , match_idx_(int64_t{0})
  , flags_(int64_t{0})
  , id_(int64_t{0}){}
struct NodeDefaultTypeInternal {
  constexpr NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_;
constexpr Entry::Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EntryDefaultTypeInternal {
  constexpr EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EntryDefaultTypeInternal() {}
  union {
    Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EntryDefaultTypeInternal _Entry_default_instance_;
constexpr VolatileState::VolatileState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commitindex_(int64_t{0})
  , lastapplied_(int64_t{0}){}
struct VolatileStateDefaultTypeInternal {
  constexpr VolatileStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolatileStateDefaultTypeInternal() {}
  union {
    VolatileState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolatileStateDefaultTypeInternal _VolatileState_default_instance_;
constexpr PersistentState::PersistentState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_()
  , currentterm_(int64_t{0})
  , votedfor_(int64_t{0}){}
struct PersistentStateDefaultTypeInternal {
  constexpr PersistentStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PersistentStateDefaultTypeInternal() {}
  union {
    PersistentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PersistentStateDefaultTypeInternal _PersistentState_default_instance_;
constexpr leaderState::leaderState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nextindex_()
  , _nextindex_cached_byte_size_(0)
  , matchindex_()
  , _matchindex_cached_byte_size_(0){}
struct leaderStateDefaultTypeInternal {
  constexpr leaderStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~leaderStateDefaultTypeInternal() {}
  union {
    leaderState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT leaderStateDefaultTypeInternal _leaderState_default_instance_;
constexpr RequestVote::RequestVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(int64_t{0})
  , candidateid_(int64_t{0})
  , lastlogindex_(int64_t{0})
  , lastlogterm_(int64_t{0}){}
struct RequestVoteDefaultTypeInternal {
  constexpr RequestVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestVoteDefaultTypeInternal() {}
  union {
    RequestVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestVoteDefaultTypeInternal _RequestVote_default_instance_;
constexpr RequestVoteResponse::RequestVoteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(int64_t{0})
  , votegranted_(false){}
struct RequestVoteResponseDefaultTypeInternal {
  constexpr RequestVoteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestVoteResponseDefaultTypeInternal() {}
  union {
    RequestVoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
constexpr AppendEntries::AppendEntries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , term_(int64_t{0})
  , prevlogindex_(int64_t{0})
  , prevlogterm_(int64_t{0})
  , leadercommit_(int64_t{0})
  , n_entries_(int64_t{0}){}
struct AppendEntriesDefaultTypeInternal {
  constexpr AppendEntriesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesDefaultTypeInternal() {}
  union {
    AppendEntries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesDefaultTypeInternal _AppendEntries_default_instance_;
constexpr AppendEntriesResponse::AppendEntriesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(int64_t{0})
  , success_(false)
  , current_idx_(0)
  , first_idx_(0){}
struct AppendEntriesResponseDefaultTypeInternal {
  constexpr AppendEntriesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesResponseDefaultTypeInternal() {}
  union {
    AppendEntriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
constexpr KeepAlive::KeepAlive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(int64_t{0})
  , leaderid_(int64_t{0}){}
struct KeepAliveDefaultTypeInternal {
  constexpr KeepAliveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeepAliveDefaultTypeInternal() {}
  union {
    KeepAlive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
constexpr KeepAliveResponse::KeepAliveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(int64_t{0})
  , success_(false){}
struct KeepAliveResponseDefaultTypeInternal {
  constexpr KeepAliveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeepAliveResponseDefaultTypeInternal() {}
  union {
    KeepAliveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeepAliveResponseDefaultTypeInternal _KeepAliveResponse_default_instance_;
}  // namespace raft
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_raft_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_raft_2eproto = nullptr;

const uint32_t TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::Node, udata_),
  PROTOBUF_FIELD_OFFSET(::raft::Node, next_idx_),
  PROTOBUF_FIELD_OFFSET(::raft::Node, match_idx_),
  PROTOBUF_FIELD_OFFSET(::raft::Node, flags_),
  PROTOBUF_FIELD_OFFSET(::raft::Node, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VolatileState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::VolatileState, commitindex_),
  PROTOBUF_FIELD_OFFSET(::raft::VolatileState, lastapplied_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::PersistentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::PersistentState, currentterm_),
  PROTOBUF_FIELD_OFFSET(::raft::PersistentState, votedfor_),
  PROTOBUF_FIELD_OFFSET(::raft::PersistentState, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::leaderState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::leaderState, nextindex_),
  PROTOBUF_FIELD_OFFSET(::raft::leaderState, matchindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::RequestVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::RequestVote, term_),
  PROTOBUF_FIELD_OFFSET(::raft::RequestVote, candidateid_),
  PROTOBUF_FIELD_OFFSET(::raft::RequestVote, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::raft::RequestVote, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::RequestVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::RequestVoteResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::RequestVoteResponse, votegranted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, term_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, leadercommit_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, entries_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, n_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, success_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, current_idx_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, first_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::KeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::KeepAlive, term_),
  PROTOBUF_FIELD_OFFSET(::raft::KeepAlive, leaderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::KeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::KeepAliveResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::KeepAliveResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raft::Node)},
  { 11, -1, -1, sizeof(::raft::Entry)},
  { 17, -1, -1, sizeof(::raft::VolatileState)},
  { 25, -1, -1, sizeof(::raft::PersistentState)},
  { 34, -1, -1, sizeof(::raft::leaderState)},
  { 42, -1, -1, sizeof(::raft::RequestVote)},
  { 52, -1, -1, sizeof(::raft::RequestVoteResponse)},
  { 60, -1, -1, sizeof(::raft::AppendEntries)},
  { 72, -1, -1, sizeof(::raft::AppendEntriesResponse)},
  { 82, -1, -1, sizeof(::raft::KeepAlive)},
  { 90, -1, -1, sizeof(::raft::KeepAliveResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_VolatileState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_PersistentState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_leaderState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_RequestVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_RequestVoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_AppendEntries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_KeepAlive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_KeepAliveResponse_default_instance_),
};

const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nraft.proto\022\004raft\032\031google/protobuf/any."
  "proto\"k\n\004Node\022#\n\005udata\030\001 \001(\0132\024.google.pr"
  "otobuf.Any\022\020\n\010next_idx\030\002 \001(\003\022\021\n\tmatch_id"
  "x\030\003 \001(\003\022\r\n\005flags\030\004 \001(\003\022\n\n\002id\030\005 \001(\003\"\007\n\005En"
  "try\"9\n\rVolatileState\022\023\n\013commitIndex\030\004 \001("
  "\003\022\023\n\013lastApplied\030\005 \001(\003\"R\n\017PersistentStat"
  "e\022\023\n\013currentTerm\030\001 \001(\003\022\020\n\010votedFor\030\002 \001(\003"
  "\022\030\n\003log\030\003 \003(\0132\013.raft.Entry\"4\n\013leaderStat"
  "e\022\021\n\tnextIndex\030\001 \003(\003\022\022\n\nmatchIndex\030\002 \003(\003"
  "\"[\n\013RequestVote\022\014\n\004term\030\001 \001(\003\022\023\n\013candida"
  "teId\030\002 \001(\003\022\024\n\014lastLogIndex\030\003 \001(\003\022\023\n\013last"
  "LogTerm\030\004 \001(\003\"8\n\023RequestVoteResponse\022\014\n\004"
  "term\030\001 \001(\003\022\023\n\013voteGranted\030\002 \001(\010\"\217\001\n\rAppe"
  "ndEntries\022\014\n\004term\030\001 \001(\003\022\024\n\014prevLogIndex\030"
  "\002 \001(\003\022\023\n\013prevLogTerm\030\003 \001(\003\022\024\n\014leaderComm"
  "it\030\004 \001(\003\022\034\n\007entries\030\005 \003(\0132\013.raft.Entry\022\021"
  "\n\tn_entries\030\006 \001(\003\"^\n\025AppendEntriesRespon"
  "se\022\014\n\004term\030\001 \001(\003\022\017\n\007success\030\002 \001(\010\022\023\n\013cur"
  "rent_idx\030\003 \001(\005\022\021\n\tfirst_idx\030\004 \001(\005\"+\n\tKee"
  "pAlive\022\014\n\004term\030\001 \001(\003\022\020\n\010leaderId\030\002 \001(\003\"2"
  "\n\021KeepAliveResponse\022\014\n\004term\030\001 \001(\003\022\017\n\007suc"
  "cess\030\002 \001(\010*4\n\tRaftState\022\014\n\010follower\020\000\022\r\n"
  "\tcandidate\020\001\022\n\n\006leader\020\0022\210\001\n\004Raft\022<\n\014RRe"
  "questVote\022\021.raft.RequestVote\032\031.raft.Requ"
  "estVoteResponse\022B\n\016RAppendEntries\022\023.raft"
  ".AppendEntries\032\033.raft.AppendEntriesRespo"
  "nseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raft_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto = {
  false, false, 1051, descriptor_table_protodef_raft_2eproto, "raft.proto", 
  &descriptor_table_raft_2eproto_once, descriptor_table_raft_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
  file_level_metadata_raft_2eproto, file_level_enum_descriptors_raft_2eproto, file_level_service_descriptors_raft_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_raft_2eproto_getter() {
  return &descriptor_table_raft_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_raft_2eproto(&descriptor_table_raft_2eproto);
namespace raft {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaftState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[0];
}
bool RaftState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Node::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& udata(const Node* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Node::_Internal::udata(const Node* msg) {
  return *msg->udata_;
}
void Node::clear_udata() {
  if (GetArenaForAllocation() == nullptr && udata_ != nullptr) {
    delete udata_;
  }
  udata_ = nullptr;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_udata()) {
    udata_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.udata_);
  } else {
    udata_ = nullptr;
  }
  ::memcpy(&next_idx_, &from.next_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&next_idx_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:raft.Node)
}

inline void Node::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&udata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&udata_)) + sizeof(id_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:raft.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete udata_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && udata_ != nullptr) {
    delete udata_;
  }
  udata_ = nullptr;
  ::memset(&next_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&next_idx_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any udata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_udata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          next_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 match_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          match_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any udata = 1;
  if (this->_internal_has_udata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::udata(this), target, stream);
  }

  // int64 next_idx = 2;
  if (this->_internal_next_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_next_idx(), target);
  }

  // int64 match_idx = 3;
  if (this->_internal_match_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_match_idx(), target);
  }

  // int64 flags = 4;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_flags(), target);
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any udata = 1;
  if (this->_internal_has_udata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udata_);
  }

  // int64 next_idx = 2;
  if (this->_internal_next_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_next_idx());
  }

  // int64 match_idx = 3;
  if (this->_internal_match_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_match_idx());
  }

  // int64 flags = 4;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_flags());
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }

void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Node *>(to)->MergeFrom(
      static_cast<const Node &>(from));
}


void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_udata()) {
    _internal_mutable_udata()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_udata());
  }
  if (from._internal_next_idx() != 0) {
    _internal_set_next_idx(from._internal_next_idx());
  }
  if (from._internal_match_idx() != 0) {
    _internal_set_match_idx(from._internal_match_idx());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, id_)
      + sizeof(Node::id_)
      - PROTOBUF_FIELD_OFFSET(Node, udata_)>(
          reinterpret_cast<char*>(&udata_),
          reinterpret_cast<char*>(&other->udata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[0]);
}

// ===================================================================

class Entry::_Internal {
 public:
};

Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:raft.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.Entry)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entry::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[1]);
}

// ===================================================================

class VolatileState::_Internal {
 public:
};

VolatileState::VolatileState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.VolatileState)
}
VolatileState::VolatileState(const VolatileState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commitindex_, &from.commitindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastapplied_) -
    reinterpret_cast<char*>(&commitindex_)) + sizeof(lastapplied_));
  // @@protoc_insertion_point(copy_constructor:raft.VolatileState)
}

inline void VolatileState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commitindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastapplied_) -
    reinterpret_cast<char*>(&commitindex_)) + sizeof(lastapplied_));
}

VolatileState::~VolatileState() {
  // @@protoc_insertion_point(destructor:raft.VolatileState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VolatileState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VolatileState::ArenaDtor(void* object) {
  VolatileState* _this = reinterpret_cast< VolatileState* >(object);
  (void)_this;
}
void VolatileState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolatileState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolatileState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VolatileState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commitindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastapplied_) -
      reinterpret_cast<char*>(&commitindex_)) + sizeof(lastapplied_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolatileState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 commitIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          commitindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lastApplied = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          lastapplied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolatileState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VolatileState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 commitIndex = 4;
  if (this->_internal_commitindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_commitindex(), target);
  }

  // int64 lastApplied = 5;
  if (this->_internal_lastapplied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_lastapplied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VolatileState)
  return target;
}

size_t VolatileState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VolatileState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 commitIndex = 4;
  if (this->_internal_commitindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_commitindex());
  }

  // int64 lastApplied = 5;
  if (this->_internal_lastapplied() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lastapplied());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolatileState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VolatileState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolatileState::GetClassData() const { return &_class_data_; }

void VolatileState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VolatileState *>(to)->MergeFrom(
      static_cast<const VolatileState &>(from));
}


void VolatileState::MergeFrom(const VolatileState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VolatileState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_commitindex() != 0) {
    _internal_set_commitindex(from._internal_commitindex());
  }
  if (from._internal_lastapplied() != 0) {
    _internal_set_lastapplied(from._internal_lastapplied());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolatileState::CopyFrom(const VolatileState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VolatileState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileState::IsInitialized() const {
  return true;
}

void VolatileState::InternalSwap(VolatileState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolatileState, lastapplied_)
      + sizeof(VolatileState::lastapplied_)
      - PROTOBUF_FIELD_OFFSET(VolatileState, commitindex_)>(
          reinterpret_cast<char*>(&commitindex_),
          reinterpret_cast<char*>(&other->commitindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolatileState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[2]);
}

// ===================================================================

class PersistentState::_Internal {
 public:
};

PersistentState::PersistentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  log_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.PersistentState)
}
PersistentState::PersistentState(const PersistentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      log_(from.log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&currentterm_, &from.currentterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&votedfor_) -
    reinterpret_cast<char*>(&currentterm_)) + sizeof(votedfor_));
  // @@protoc_insertion_point(copy_constructor:raft.PersistentState)
}

inline void PersistentState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&currentterm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&votedfor_) -
    reinterpret_cast<char*>(&currentterm_)) + sizeof(votedfor_));
}

PersistentState::~PersistentState() {
  // @@protoc_insertion_point(destructor:raft.PersistentState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PersistentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PersistentState::ArenaDtor(void* object) {
  PersistentState* _this = reinterpret_cast< PersistentState* >(object);
  (void)_this;
}
void PersistentState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PersistentState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PersistentState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.PersistentState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  ::memset(&currentterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votedfor_) -
      reinterpret_cast<char*>(&currentterm_)) + sizeof(votedfor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistentState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 currentTerm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          currentterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 votedFor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          votedfor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .raft.Entry log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersistentState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.PersistentState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 currentTerm = 1;
  if (this->_internal_currentterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_currentterm(), target);
  }

  // int64 votedFor = 2;
  if (this->_internal_votedfor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_votedfor(), target);
  }

  // repeated .raft.Entry log = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_log(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.PersistentState)
  return target;
}

size_t PersistentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.PersistentState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft.Entry log = 3;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 currentTerm = 1;
  if (this->_internal_currentterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_currentterm());
  }

  // int64 votedFor = 2;
  if (this->_internal_votedfor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_votedfor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersistentState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PersistentState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersistentState::GetClassData() const { return &_class_data_; }

void PersistentState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PersistentState *>(to)->MergeFrom(
      static_cast<const PersistentState &>(from));
}


void PersistentState::MergeFrom(const PersistentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.PersistentState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
  if (from._internal_currentterm() != 0) {
    _internal_set_currentterm(from._internal_currentterm());
  }
  if (from._internal_votedfor() != 0) {
    _internal_set_votedfor(from._internal_votedfor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersistentState::CopyFrom(const PersistentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.PersistentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentState::IsInitialized() const {
  return true;
}

void PersistentState::InternalSwap(PersistentState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  log_.InternalSwap(&other->log_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistentState, votedfor_)
      + sizeof(PersistentState::votedfor_)
      - PROTOBUF_FIELD_OFFSET(PersistentState, currentterm_)>(
          reinterpret_cast<char*>(&currentterm_),
          reinterpret_cast<char*>(&other->currentterm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[3]);
}

// ===================================================================

class leaderState::_Internal {
 public:
};

leaderState::leaderState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nextindex_(arena),
  matchindex_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.leaderState)
}
leaderState::leaderState(const leaderState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nextindex_(from.nextindex_),
      matchindex_(from.matchindex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.leaderState)
}

inline void leaderState::SharedCtor() {
}

leaderState::~leaderState() {
  // @@protoc_insertion_point(destructor:raft.leaderState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void leaderState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void leaderState::ArenaDtor(void* object) {
  leaderState* _this = reinterpret_cast< leaderState* >(object);
  (void)_this;
}
void leaderState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void leaderState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void leaderState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.leaderState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nextindex_.Clear();
  matchindex_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* leaderState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 nextIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_nextindex(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_nextindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 matchIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_matchindex(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_matchindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* leaderState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.leaderState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 nextIndex = 1;
  {
    int byte_size = _nextindex_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_nextindex(), byte_size, target);
    }
  }

  // repeated int64 matchIndex = 2;
  {
    int byte_size = _matchindex_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_matchindex(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.leaderState)
  return target;
}

size_t leaderState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.leaderState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 nextIndex = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->nextindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nextindex_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 matchIndex = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->matchindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matchindex_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData leaderState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    leaderState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*leaderState::GetClassData() const { return &_class_data_; }

void leaderState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<leaderState *>(to)->MergeFrom(
      static_cast<const leaderState &>(from));
}


void leaderState::MergeFrom(const leaderState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.leaderState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nextindex_.MergeFrom(from.nextindex_);
  matchindex_.MergeFrom(from.matchindex_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void leaderState::CopyFrom(const leaderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.leaderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool leaderState::IsInitialized() const {
  return true;
}

void leaderState::InternalSwap(leaderState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nextindex_.InternalSwap(&other->nextindex_);
  matchindex_.InternalSwap(&other->matchindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata leaderState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[4]);
}

// ===================================================================

class RequestVote::_Internal {
 public:
};

RequestVote::RequestVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.RequestVote)
}
RequestVote::RequestVote(const RequestVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:raft.RequestVote)
}

inline void RequestVote::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVote::~RequestVote() {
  // @@protoc_insertion_point(destructor:raft.RequestVote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVote::ArenaDtor(void* object) {
  RequestVote* _this = reinterpret_cast< RequestVote* >(object);
  (void)_this;
}
void RequestVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestVote::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.RequestVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 candidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.RequestVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // int64 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_candidateid(), target);
  }

  // int64 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int64 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.RequestVote)
  return target;
}

size_t RequestVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.RequestVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_term());
  }

  // int64 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_candidateid());
  }

  // int64 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lastlogindex());
  }

  // int64 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVote::GetClassData() const { return &_class_data_; }

void RequestVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestVote *>(to)->MergeFrom(
      static_cast<const RequestVote &>(from));
}


void RequestVote::MergeFrom(const RequestVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.RequestVote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_candidateid() != 0) {
    _internal_set_candidateid(from._internal_candidateid());
  }
  if (from._internal_lastlogindex() != 0) {
    _internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from._internal_lastlogterm() != 0) {
    _internal_set_lastlogterm(from._internal_lastlogterm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVote::CopyFrom(const RequestVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.RequestVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote::IsInitialized() const {
  return true;
}

void RequestVote::InternalSwap(RequestVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVote, lastlogterm_)
      + sizeof(RequestVote::lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVote, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[5]);
}

// ===================================================================

class RequestVoteResponse::_Internal {
 public:
};

RequestVoteResponse::RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.RequestVoteResponse)
}
RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:raft.RequestVoteResponse)
}

inline void RequestVoteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
}

RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:raft.RequestVoteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestVoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteResponse::ArenaDtor(void* object) {
  RequestVoteResponse* _this = reinterpret_cast< RequestVoteResponse* >(object);
  (void)_this;
}
void RequestVoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.RequestVoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool voteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.RequestVoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.RequestVoteResponse)
  return target;
}

size_t RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.RequestVoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_term());
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestVoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteResponse::GetClassData() const { return &_class_data_; }

void RequestVoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestVoteResponse *>(to)->MergeFrom(
      static_cast<const RequestVoteResponse &>(from));
}


void RequestVoteResponse::MergeFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_votegranted() != 0) {
    _internal_set_votegranted(from._internal_votegranted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponse::IsInitialized() const {
  return true;
}

void RequestVoteResponse::InternalSwap(RequestVoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteResponse, votegranted_)
      + sizeof(RequestVoteResponse::votegranted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteResponse, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[6]);
}

// ===================================================================

class AppendEntries::_Internal {
 public:
};

AppendEntries::AppendEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntries)
}
AppendEntries::AppendEntries(const AppendEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_entries_) -
    reinterpret_cast<char*>(&term_)) + sizeof(n_entries_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntries)
}

inline void AppendEntries::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_entries_) -
    reinterpret_cast<char*>(&term_)) + sizeof(n_entries_));
}

AppendEntries::~AppendEntries() {
  // @@protoc_insertion_point(destructor:raft.AppendEntries)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntries::ArenaDtor(void* object) {
  AppendEntries* _this = reinterpret_cast< AppendEntries* >(object);
  (void)_this;
}
void AppendEntries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_entries_) -
      reinterpret_cast<char*>(&term_)) + sizeof(n_entries_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 prevLogIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 prevLogTerm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 leaderCommit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .raft.Entry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 n_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          n_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // int64 prevLogIndex = 2;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_prevlogindex(), target);
  }

  // int64 prevLogTerm = 3;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_prevlogterm(), target);
  }

  // int64 leaderCommit = 4;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_leadercommit(), target);
  }

  // repeated .raft.Entry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_entries(i), target, stream);
  }

  // int64 n_entries = 6;
  if (this->_internal_n_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_n_entries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntries)
  return target;
}

size_t AppendEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft.Entry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_term());
  }

  // int64 prevLogIndex = 2;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_prevlogindex());
  }

  // int64 prevLogTerm = 3;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_prevlogterm());
  }

  // int64 leaderCommit = 4;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_leadercommit());
  }

  // int64 n_entries = 6;
  if (this->_internal_n_entries() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_n_entries());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntries::GetClassData() const { return &_class_data_; }

void AppendEntries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendEntries *>(to)->MergeFrom(
      static_cast<const AppendEntries &>(from));
}


void AppendEntries::MergeFrom(const AppendEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntries)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_prevlogindex() != 0) {
    _internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from._internal_prevlogterm() != 0) {
    _internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from._internal_leadercommit() != 0) {
    _internal_set_leadercommit(from._internal_leadercommit());
  }
  if (from._internal_n_entries() != 0) {
    _internal_set_n_entries(from._internal_n_entries());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntries::CopyFrom(const AppendEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntries::IsInitialized() const {
  return true;
}

void AppendEntries::InternalSwap(AppendEntries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntries, n_entries_)
      + sizeof(AppendEntries::n_entries_)
      - PROTOBUF_FIELD_OFFSET(AppendEntries, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntries::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[7]);
}

// ===================================================================

class AppendEntriesResponse::_Internal {
 public:
};

AppendEntriesResponse::AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_idx_) -
    reinterpret_cast<char*>(&term_)) + sizeof(first_idx_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesResponse)
}

inline void AppendEntriesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_idx_) -
    reinterpret_cast<char*>(&term_)) + sizeof(first_idx_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesResponse::ArenaDtor(void* object) {
  AppendEntriesResponse* _this = reinterpret_cast< AppendEntriesResponse* >(object);
  (void)_this;
}
void AppendEntriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_idx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(first_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          current_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 first_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          first_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 current_idx = 3;
  if (this->_internal_current_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_idx(), target);
  }

  // int32 first_idx = 4;
  if (this->_internal_first_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_first_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_term());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 current_idx = 3;
  if (this->_internal_current_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_current_idx());
  }

  // int32 first_idx = 4;
  if (this->_internal_first_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_first_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesResponse::GetClassData() const { return &_class_data_; }

void AppendEntriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendEntriesResponse *>(to)->MergeFrom(
      static_cast<const AppendEntriesResponse &>(from));
}


void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_current_idx() != 0) {
    _internal_set_current_idx(from._internal_current_idx());
  }
  if (from._internal_first_idx() != 0) {
    _internal_set_first_idx(from._internal_first_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  return true;
}

void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, first_idx_)
      + sizeof(AppendEntriesResponse::first_idx_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[8]);
}

// ===================================================================

class KeepAlive::_Internal {
 public:
};

KeepAlive::KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.KeepAlive)
}
KeepAlive::KeepAlive(const KeepAlive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaderid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  // @@protoc_insertion_point(copy_constructor:raft.KeepAlive)
}

inline void KeepAlive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leaderid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
}

KeepAlive::~KeepAlive() {
  // @@protoc_insertion_point(destructor:raft.KeepAlive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeepAlive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeepAlive::ArenaDtor(void* object) {
  KeepAlive* _this = reinterpret_cast< KeepAlive* >(object);
  (void)_this;
}
void KeepAlive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeepAlive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.KeepAlive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaderid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAlive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 leaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepAlive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.KeepAlive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // int64 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.KeepAlive)
  return target;
}

size_t KeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.KeepAlive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_term());
  }

  // int64 leaderId = 2;
  if (this->_internal_leaderid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepAlive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeepAlive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepAlive::GetClassData() const { return &_class_data_; }

void KeepAlive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeepAlive *>(to)->MergeFrom(
      static_cast<const KeepAlive &>(from));
}


void KeepAlive::MergeFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive::IsInitialized() const {
  return true;
}

void KeepAlive::InternalSwap(KeepAlive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAlive, leaderid_)
      + sizeof(KeepAlive::leaderid_)
      - PROTOBUF_FIELD_OFFSET(KeepAlive, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAlive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[9]);
}

// ===================================================================

class KeepAliveResponse::_Internal {
 public:
};

KeepAliveResponse::KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.KeepAliveResponse)
}
KeepAliveResponse::KeepAliveResponse(const KeepAliveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:raft.KeepAliveResponse)
}

inline void KeepAliveResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

KeepAliveResponse::~KeepAliveResponse() {
  // @@protoc_insertion_point(destructor:raft.KeepAliveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeepAliveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeepAliveResponse::ArenaDtor(void* object) {
  KeepAliveResponse* _this = reinterpret_cast< KeepAliveResponse* >(object);
  (void)_this;
}
void KeepAliveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeepAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.KeepAliveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAliveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepAliveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.KeepAliveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.KeepAliveResponse)
  return target;
}

size_t KeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.KeepAliveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_term());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepAliveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeepAliveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepAliveResponse::GetClassData() const { return &_class_data_; }

void KeepAliveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeepAliveResponse *>(to)->MergeFrom(
      static_cast<const KeepAliveResponse &>(from));
}


void KeepAliveResponse::MergeFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAliveResponse::CopyFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveResponse::IsInitialized() const {
  return true;
}

void KeepAliveResponse::InternalSwap(KeepAliveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAliveResponse, success_)
      + sizeof(KeepAliveResponse::success_)
      - PROTOBUF_FIELD_OFFSET(KeepAliveResponse, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::Node* Arena::CreateMaybeMessage< ::raft::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::Entry* Arena::CreateMaybeMessage< ::raft::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::VolatileState* Arena::CreateMaybeMessage< ::raft::VolatileState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::VolatileState >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::PersistentState* Arena::CreateMaybeMessage< ::raft::PersistentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::PersistentState >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::leaderState* Arena::CreateMaybeMessage< ::raft::leaderState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::leaderState >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::RequestVote* Arena::CreateMaybeMessage< ::raft::RequestVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::RequestVote >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::RequestVoteResponse* Arena::CreateMaybeMessage< ::raft::RequestVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::RequestVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::AppendEntries* Arena::CreateMaybeMessage< ::raft::AppendEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::AppendEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::AppendEntriesResponse* Arena::CreateMaybeMessage< ::raft::AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::AppendEntriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::KeepAlive* Arena::CreateMaybeMessage< ::raft::KeepAlive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::KeepAlive >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::KeepAliveResponse* Arena::CreateMaybeMessage< ::raft::KeepAliveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::KeepAliveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
