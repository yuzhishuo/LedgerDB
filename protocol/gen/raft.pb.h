// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
namespace raft {
class AppendEntries;
struct AppendEntriesDefaultTypeInternal;
extern AppendEntriesDefaultTypeInternal _AppendEntries_default_instance_;
class AppendEntriesResponse;
struct AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class KeepAlive;
struct KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class KeepAliveResponse;
struct KeepAliveResponseDefaultTypeInternal;
extern KeepAliveResponseDefaultTypeInternal _KeepAliveResponse_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class PersistentState;
struct PersistentStateDefaultTypeInternal;
extern PersistentStateDefaultTypeInternal _PersistentState_default_instance_;
class RequestVote;
struct RequestVoteDefaultTypeInternal;
extern RequestVoteDefaultTypeInternal _RequestVote_default_instance_;
class RequestVoteResponse;
struct RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
class VolatileState;
struct VolatileStateDefaultTypeInternal;
extern VolatileStateDefaultTypeInternal _VolatileState_default_instance_;
class leaderState;
struct leaderStateDefaultTypeInternal;
extern leaderStateDefaultTypeInternal _leaderState_default_instance_;
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::AppendEntries* Arena::CreateMaybeMessage<::raft::AppendEntries>(Arena*);
template<> ::raft::AppendEntriesResponse* Arena::CreateMaybeMessage<::raft::AppendEntriesResponse>(Arena*);
template<> ::raft::Entry* Arena::CreateMaybeMessage<::raft::Entry>(Arena*);
template<> ::raft::KeepAlive* Arena::CreateMaybeMessage<::raft::KeepAlive>(Arena*);
template<> ::raft::KeepAliveResponse* Arena::CreateMaybeMessage<::raft::KeepAliveResponse>(Arena*);
template<> ::raft::Node* Arena::CreateMaybeMessage<::raft::Node>(Arena*);
template<> ::raft::PersistentState* Arena::CreateMaybeMessage<::raft::PersistentState>(Arena*);
template<> ::raft::RequestVote* Arena::CreateMaybeMessage<::raft::RequestVote>(Arena*);
template<> ::raft::RequestVoteResponse* Arena::CreateMaybeMessage<::raft::RequestVoteResponse>(Arena*);
template<> ::raft::VolatileState* Arena::CreateMaybeMessage<::raft::VolatileState>(Arena*);
template<> ::raft::leaderState* Arena::CreateMaybeMessage<::raft::leaderState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {

enum RaftState : int {
  follower = 0,
  candidate = 1,
  leader = 2,
  RaftState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RaftState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RaftState_IsValid(int value);
constexpr RaftState RaftState_MIN = follower;
constexpr RaftState RaftState_MAX = leader;
constexpr int RaftState_ARRAYSIZE = RaftState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaftState_descriptor();
template<typename T>
inline const std::string& RaftState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RaftState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RaftState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RaftState_descriptor(), enum_t_value);
}
inline bool RaftState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RaftState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RaftState>(
    RaftState_descriptor(), name, value);
}
// ===================================================================

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdataFieldNumber = 1,
    kNextIdxFieldNumber = 2,
    kMatchIdxFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // .google.protobuf.Any udata = 1;
  bool has_udata() const;
  private:
  bool _internal_has_udata() const;
  public:
  void clear_udata();
  const ::PROTOBUF_NAMESPACE_ID::Any& udata() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_udata();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_udata();
  void set_allocated_udata(::PROTOBUF_NAMESPACE_ID::Any* udata);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_udata() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_udata();
  public:
  void unsafe_arena_set_allocated_udata(
      ::PROTOBUF_NAMESPACE_ID::Any* udata);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_udata();

  // int64 next_idx = 2;
  void clear_next_idx();
  int64_t next_idx() const;
  void set_next_idx(int64_t value);
  private:
  int64_t _internal_next_idx() const;
  void _internal_set_next_idx(int64_t value);
  public:

  // int64 match_idx = 3;
  void clear_match_idx();
  int64_t match_idx() const;
  void set_match_idx(int64_t value);
  private:
  int64_t _internal_match_idx() const;
  void _internal_set_match_idx(int64_t value);
  public:

  // int64 flags = 4;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int64 id = 5;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Any* udata_;
  int64_t next_idx_;
  int64_t match_idx_;
  int64_t flags_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit constexpr Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:raft.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class VolatileState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.VolatileState) */ {
 public:
  inline VolatileState() : VolatileState(nullptr) {}
  ~VolatileState() override;
  explicit constexpr VolatileState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolatileState(const VolatileState& from);
  VolatileState(VolatileState&& from) noexcept
    : VolatileState() {
    *this = ::std::move(from);
  }

  inline VolatileState& operator=(const VolatileState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolatileState& operator=(VolatileState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolatileState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolatileState* internal_default_instance() {
    return reinterpret_cast<const VolatileState*>(
               &_VolatileState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VolatileState& a, VolatileState& b) {
    a.Swap(&b);
  }
  inline void Swap(VolatileState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolatileState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolatileState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolatileState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolatileState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VolatileState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolatileState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.VolatileState";
  }
  protected:
  explicit VolatileState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitIndexFieldNumber = 4,
    kLastAppliedFieldNumber = 5,
  };
  // int64 commitIndex = 4;
  void clear_commitindex();
  int64_t commitindex() const;
  void set_commitindex(int64_t value);
  private:
  int64_t _internal_commitindex() const;
  void _internal_set_commitindex(int64_t value);
  public:

  // int64 lastApplied = 5;
  void clear_lastapplied();
  int64_t lastapplied() const;
  void set_lastapplied(int64_t value);
  private:
  int64_t _internal_lastapplied() const;
  void _internal_set_lastapplied(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.VolatileState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t commitindex_;
  int64_t lastapplied_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class PersistentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.PersistentState) */ {
 public:
  inline PersistentState() : PersistentState(nullptr) {}
  ~PersistentState() override;
  explicit constexpr PersistentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersistentState(const PersistentState& from);
  PersistentState(PersistentState&& from) noexcept
    : PersistentState() {
    *this = ::std::move(from);
  }

  inline PersistentState& operator=(const PersistentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentState& operator=(PersistentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersistentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersistentState* internal_default_instance() {
    return reinterpret_cast<const PersistentState*>(
               &_PersistentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PersistentState& a, PersistentState& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersistentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersistentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersistentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersistentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PersistentState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.PersistentState";
  }
  protected:
  explicit PersistentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 3,
    kCurrentTermFieldNumber = 1,
    kVotedForFieldNumber = 2,
  };
  // repeated .raft.Entry log = 3;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::raft::Entry* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >*
      mutable_log();
  private:
  const ::raft::Entry& _internal_log(int index) const;
  ::raft::Entry* _internal_add_log();
  public:
  const ::raft::Entry& log(int index) const;
  ::raft::Entry* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >&
      log() const;

  // int64 currentTerm = 1;
  void clear_currentterm();
  int64_t currentterm() const;
  void set_currentterm(int64_t value);
  private:
  int64_t _internal_currentterm() const;
  void _internal_set_currentterm(int64_t value);
  public:

  // int64 votedFor = 2;
  void clear_votedfor();
  int64_t votedfor() const;
  void set_votedfor(int64_t value);
  private:
  int64_t _internal_votedfor() const;
  void _internal_set_votedfor(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.PersistentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry > log_;
  int64_t currentterm_;
  int64_t votedfor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class leaderState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.leaderState) */ {
 public:
  inline leaderState() : leaderState(nullptr) {}
  ~leaderState() override;
  explicit constexpr leaderState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  leaderState(const leaderState& from);
  leaderState(leaderState&& from) noexcept
    : leaderState() {
    *this = ::std::move(from);
  }

  inline leaderState& operator=(const leaderState& from) {
    CopyFrom(from);
    return *this;
  }
  inline leaderState& operator=(leaderState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const leaderState& default_instance() {
    return *internal_default_instance();
  }
  static inline const leaderState* internal_default_instance() {
    return reinterpret_cast<const leaderState*>(
               &_leaderState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(leaderState& a, leaderState& b) {
    a.Swap(&b);
  }
  inline void Swap(leaderState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(leaderState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  leaderState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<leaderState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const leaderState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const leaderState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(leaderState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.leaderState";
  }
  protected:
  explicit leaderState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextIndexFieldNumber = 1,
    kMatchIndexFieldNumber = 2,
  };
  // repeated int64 nextIndex = 1;
  int nextindex_size() const;
  private:
  int _internal_nextindex_size() const;
  public:
  void clear_nextindex();
  private:
  int64_t _internal_nextindex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_nextindex() const;
  void _internal_add_nextindex(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_nextindex();
  public:
  int64_t nextindex(int index) const;
  void set_nextindex(int index, int64_t value);
  void add_nextindex(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      nextindex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_nextindex();

  // repeated int64 matchIndex = 2;
  int matchindex_size() const;
  private:
  int _internal_matchindex_size() const;
  public:
  void clear_matchindex();
  private:
  int64_t _internal_matchindex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_matchindex() const;
  void _internal_add_matchindex(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_matchindex();
  public:
  int64_t matchindex(int index) const;
  void set_matchindex(int index, int64_t value);
  void add_matchindex(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      matchindex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_matchindex();

  // @@protoc_insertion_point(class_scope:raft.leaderState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > nextindex_;
  mutable std::atomic<int> _nextindex_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > matchindex_;
  mutable std::atomic<int> _matchindex_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestVote) */ {
 public:
  inline RequestVote() : RequestVote(nullptr) {}
  ~RequestVote() override;
  explicit constexpr RequestVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVote(const RequestVote& from);
  RequestVote(RequestVote&& from) noexcept
    : RequestVote() {
    *this = ::std::move(from);
  }

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVote& operator=(RequestVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVote* internal_default_instance() {
    return reinterpret_cast<const RequestVote*>(
               &_RequestVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestVote& a, RequestVote& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestVote";
  }
  protected:
  explicit RequestVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int64 term = 1;
  void clear_term();
  int64_t term() const;
  void set_term(int64_t value);
  private:
  int64_t _internal_term() const;
  void _internal_set_term(int64_t value);
  public:

  // int64 candidateId = 2;
  void clear_candidateid();
  int64_t candidateid() const;
  void set_candidateid(int64_t value);
  private:
  int64_t _internal_candidateid() const;
  void _internal_set_candidateid(int64_t value);
  public:

  // int64 lastLogIndex = 3;
  void clear_lastlogindex();
  int64_t lastlogindex() const;
  void set_lastlogindex(int64_t value);
  private:
  int64_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(int64_t value);
  public:

  // int64 lastLogTerm = 4;
  void clear_lastlogterm();
  int64_t lastlogterm() const;
  void set_lastlogterm(int64_t value);
  private:
  int64_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t term_;
  int64_t candidateid_;
  int64_t lastlogindex_;
  int64_t lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {}
  ~RequestVoteResponse() override;
  explicit constexpr RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestVoteResponse";
  }
  protected:
  explicit RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // int64 term = 1;
  void clear_term();
  int64_t term() const;
  void set_term(int64_t value);
  private:
  int64_t _internal_term() const;
  void _internal_set_term(int64_t value);
  public:

  // bool voteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.AppendEntries) */ {
 public:
  inline AppendEntries() : AppendEntries(nullptr) {}
  ~AppendEntries() override;
  explicit constexpr AppendEntries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntries(const AppendEntries& from);
  AppendEntries(AppendEntries&& from) noexcept
    : AppendEntries() {
    *this = ::std::move(from);
  }

  inline AppendEntries& operator=(const AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntries& operator=(AppendEntries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntries& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntries* internal_default_instance() {
    return reinterpret_cast<const AppendEntries*>(
               &_AppendEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AppendEntries& a, AppendEntries& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntries& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.AppendEntries";
  }
  protected:
  explicit AppendEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 2,
    kPrevLogTermFieldNumber = 3,
    kLeaderCommitFieldNumber = 4,
    kNEntriesFieldNumber = 6,
  };
  // repeated .raft.Entry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raft::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >*
      mutable_entries();
  private:
  const ::raft::Entry& _internal_entries(int index) const;
  ::raft::Entry* _internal_add_entries();
  public:
  const ::raft::Entry& entries(int index) const;
  ::raft::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >&
      entries() const;

  // int64 term = 1;
  void clear_term();
  int64_t term() const;
  void set_term(int64_t value);
  private:
  int64_t _internal_term() const;
  void _internal_set_term(int64_t value);
  public:

  // int64 prevLogIndex = 2;
  void clear_prevlogindex();
  int64_t prevlogindex() const;
  void set_prevlogindex(int64_t value);
  private:
  int64_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(int64_t value);
  public:

  // int64 prevLogTerm = 3;
  void clear_prevlogterm();
  int64_t prevlogterm() const;
  void set_prevlogterm(int64_t value);
  private:
  int64_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(int64_t value);
  public:

  // int64 leaderCommit = 4;
  void clear_leadercommit();
  int64_t leadercommit() const;
  void set_leadercommit(int64_t value);
  private:
  int64_t _internal_leadercommit() const;
  void _internal_set_leadercommit(int64_t value);
  public:

  // int64 n_entries = 6;
  void clear_n_entries();
  int64_t n_entries() const;
  void set_n_entries(int64_t value);
  private:
  int64_t _internal_n_entries() const;
  void _internal_set_n_entries(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.AppendEntries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry > entries_;
  int64_t term_;
  int64_t prevlogindex_;
  int64_t prevlogterm_;
  int64_t leadercommit_;
  int64_t n_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.AppendEntriesResponse) */ {
 public:
  inline AppendEntriesResponse() : AppendEntriesResponse(nullptr) {}
  ~AppendEntriesResponse() override;
  explicit constexpr AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendEntriesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.AppendEntriesResponse";
  }
  protected:
  explicit AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kCurrentIdxFieldNumber = 3,
    kFirstIdxFieldNumber = 4,
  };
  // int64 term = 1;
  void clear_term();
  int64_t term() const;
  void set_term(int64_t value);
  private:
  int64_t _internal_term() const;
  void _internal_set_term(int64_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 current_idx = 3;
  void clear_current_idx();
  int32_t current_idx() const;
  void set_current_idx(int32_t value);
  private:
  int32_t _internal_current_idx() const;
  void _internal_set_current_idx(int32_t value);
  public:

  // int32 first_idx = 4;
  void clear_first_idx();
  int32_t first_idx() const;
  void set_first_idx(int32_t value);
  private:
  int32_t _internal_first_idx() const;
  void _internal_set_first_idx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.AppendEntriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t term_;
  bool success_;
  int32_t current_idx_;
  int32_t first_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class KeepAlive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.KeepAlive) */ {
 public:
  inline KeepAlive() : KeepAlive(nullptr) {}
  ~KeepAlive() override;
  explicit constexpr KeepAlive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAlive(const KeepAlive& from);
  KeepAlive(KeepAlive&& from) noexcept
    : KeepAlive() {
    *this = ::std::move(from);
  }

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAlive& operator=(KeepAlive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAlive& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KeepAlive& a, KeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAlive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAlive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeepAlive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeepAlive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAlive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.KeepAlive";
  }
  protected:
  explicit KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
  };
  // int64 term = 1;
  void clear_term();
  int64_t term() const;
  void set_term(int64_t value);
  private:
  int64_t _internal_term() const;
  void _internal_set_term(int64_t value);
  public:

  // int64 leaderId = 2;
  void clear_leaderid();
  int64_t leaderid() const;
  void set_leaderid(int64_t value);
  private:
  int64_t _internal_leaderid() const;
  void _internal_set_leaderid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.KeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t term_;
  int64_t leaderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.KeepAliveResponse) */ {
 public:
  inline KeepAliveResponse() : KeepAliveResponse(nullptr) {}
  ~KeepAliveResponse() override;
  explicit constexpr KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveResponse(const KeepAliveResponse& from);
  KeepAliveResponse(KeepAliveResponse&& from) noexcept
    : KeepAliveResponse() {
    *this = ::std::move(from);
  }

  inline KeepAliveResponse& operator=(const KeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveResponse& operator=(KeepAliveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveResponse* internal_default_instance() {
    return reinterpret_cast<const KeepAliveResponse*>(
               &_KeepAliveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KeepAliveResponse& a, KeepAliveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeepAliveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeepAliveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.KeepAliveResponse";
  }
  protected:
  explicit KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int64 term = 1;
  void clear_term();
  int64_t term() const;
  void set_term(int64_t value);
  private:
  int64_t _internal_term() const;
  void _internal_set_term(int64_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.KeepAliveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// .google.protobuf.Any udata = 1;
inline bool Node::_internal_has_udata() const {
  return this != internal_default_instance() && udata_ != nullptr;
}
inline bool Node::has_udata() const {
  return _internal_has_udata();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Node::_internal_udata() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = udata_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Node::udata() const {
  // @@protoc_insertion_point(field_get:raft.Node.udata)
  return _internal_udata();
}
inline void Node::unsafe_arena_set_allocated_udata(
    ::PROTOBUF_NAMESPACE_ID::Any* udata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udata_);
  }
  udata_ = udata;
  if (udata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.Node.udata)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Node::release_udata() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = udata_;
  udata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Node::unsafe_arena_release_udata() {
  // @@protoc_insertion_point(field_release:raft.Node.udata)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = udata_;
  udata_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Node::_internal_mutable_udata() {
  
  if (udata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    udata_ = p;
  }
  return udata_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Node::mutable_udata() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_udata();
  // @@protoc_insertion_point(field_mutable:raft.Node.udata)
  return _msg;
}
inline void Node::set_allocated_udata(::PROTOBUF_NAMESPACE_ID::Any* udata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(udata_);
  }
  if (udata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udata));
    if (message_arena != submessage_arena) {
      udata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udata, submessage_arena);
    }
    
  } else {
    
  }
  udata_ = udata;
  // @@protoc_insertion_point(field_set_allocated:raft.Node.udata)
}

// int64 next_idx = 2;
inline void Node::clear_next_idx() {
  next_idx_ = int64_t{0};
}
inline int64_t Node::_internal_next_idx() const {
  return next_idx_;
}
inline int64_t Node::next_idx() const {
  // @@protoc_insertion_point(field_get:raft.Node.next_idx)
  return _internal_next_idx();
}
inline void Node::_internal_set_next_idx(int64_t value) {
  
  next_idx_ = value;
}
inline void Node::set_next_idx(int64_t value) {
  _internal_set_next_idx(value);
  // @@protoc_insertion_point(field_set:raft.Node.next_idx)
}

// int64 match_idx = 3;
inline void Node::clear_match_idx() {
  match_idx_ = int64_t{0};
}
inline int64_t Node::_internal_match_idx() const {
  return match_idx_;
}
inline int64_t Node::match_idx() const {
  // @@protoc_insertion_point(field_get:raft.Node.match_idx)
  return _internal_match_idx();
}
inline void Node::_internal_set_match_idx(int64_t value) {
  
  match_idx_ = value;
}
inline void Node::set_match_idx(int64_t value) {
  _internal_set_match_idx(value);
  // @@protoc_insertion_point(field_set:raft.Node.match_idx)
}

// int64 flags = 4;
inline void Node::clear_flags() {
  flags_ = int64_t{0};
}
inline int64_t Node::_internal_flags() const {
  return flags_;
}
inline int64_t Node::flags() const {
  // @@protoc_insertion_point(field_get:raft.Node.flags)
  return _internal_flags();
}
inline void Node::_internal_set_flags(int64_t value) {
  
  flags_ = value;
}
inline void Node::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:raft.Node.flags)
}

// int64 id = 5;
inline void Node::clear_id() {
  id_ = int64_t{0};
}
inline int64_t Node::_internal_id() const {
  return id_;
}
inline int64_t Node::id() const {
  // @@protoc_insertion_point(field_get:raft.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void Node::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:raft.Node.id)
}

// -------------------------------------------------------------------

// Entry

// string data = 1;
inline void Entry::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:raft.Entry.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.Entry.data)
}
inline std::string* Entry::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:raft.Entry.data)
  return _s;
}
inline const std::string& Entry::_internal_data() const {
  return data_.Get();
}
inline void Entry::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:raft.Entry.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Entry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.Entry.data)
}

// -------------------------------------------------------------------

// VolatileState

// int64 commitIndex = 4;
inline void VolatileState::clear_commitindex() {
  commitindex_ = int64_t{0};
}
inline int64_t VolatileState::_internal_commitindex() const {
  return commitindex_;
}
inline int64_t VolatileState::commitindex() const {
  // @@protoc_insertion_point(field_get:raft.VolatileState.commitIndex)
  return _internal_commitindex();
}
inline void VolatileState::_internal_set_commitindex(int64_t value) {
  
  commitindex_ = value;
}
inline void VolatileState::set_commitindex(int64_t value) {
  _internal_set_commitindex(value);
  // @@protoc_insertion_point(field_set:raft.VolatileState.commitIndex)
}

// int64 lastApplied = 5;
inline void VolatileState::clear_lastapplied() {
  lastapplied_ = int64_t{0};
}
inline int64_t VolatileState::_internal_lastapplied() const {
  return lastapplied_;
}
inline int64_t VolatileState::lastapplied() const {
  // @@protoc_insertion_point(field_get:raft.VolatileState.lastApplied)
  return _internal_lastapplied();
}
inline void VolatileState::_internal_set_lastapplied(int64_t value) {
  
  lastapplied_ = value;
}
inline void VolatileState::set_lastapplied(int64_t value) {
  _internal_set_lastapplied(value);
  // @@protoc_insertion_point(field_set:raft.VolatileState.lastApplied)
}

// -------------------------------------------------------------------

// PersistentState

// int64 currentTerm = 1;
inline void PersistentState::clear_currentterm() {
  currentterm_ = int64_t{0};
}
inline int64_t PersistentState::_internal_currentterm() const {
  return currentterm_;
}
inline int64_t PersistentState::currentterm() const {
  // @@protoc_insertion_point(field_get:raft.PersistentState.currentTerm)
  return _internal_currentterm();
}
inline void PersistentState::_internal_set_currentterm(int64_t value) {
  
  currentterm_ = value;
}
inline void PersistentState::set_currentterm(int64_t value) {
  _internal_set_currentterm(value);
  // @@protoc_insertion_point(field_set:raft.PersistentState.currentTerm)
}

// int64 votedFor = 2;
inline void PersistentState::clear_votedfor() {
  votedfor_ = int64_t{0};
}
inline int64_t PersistentState::_internal_votedfor() const {
  return votedfor_;
}
inline int64_t PersistentState::votedfor() const {
  // @@protoc_insertion_point(field_get:raft.PersistentState.votedFor)
  return _internal_votedfor();
}
inline void PersistentState::_internal_set_votedfor(int64_t value) {
  
  votedfor_ = value;
}
inline void PersistentState::set_votedfor(int64_t value) {
  _internal_set_votedfor(value);
  // @@protoc_insertion_point(field_set:raft.PersistentState.votedFor)
}

// repeated .raft.Entry log = 3;
inline int PersistentState::_internal_log_size() const {
  return log_.size();
}
inline int PersistentState::log_size() const {
  return _internal_log_size();
}
inline void PersistentState::clear_log() {
  log_.Clear();
}
inline ::raft::Entry* PersistentState::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:raft.PersistentState.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >*
PersistentState::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:raft.PersistentState.log)
  return &log_;
}
inline const ::raft::Entry& PersistentState::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::raft::Entry& PersistentState::log(int index) const {
  // @@protoc_insertion_point(field_get:raft.PersistentState.log)
  return _internal_log(index);
}
inline ::raft::Entry* PersistentState::_internal_add_log() {
  return log_.Add();
}
inline ::raft::Entry* PersistentState::add_log() {
  ::raft::Entry* _add = _internal_add_log();
  // @@protoc_insertion_point(field_add:raft.PersistentState.log)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >&
PersistentState::log() const {
  // @@protoc_insertion_point(field_list:raft.PersistentState.log)
  return log_;
}

// -------------------------------------------------------------------

// leaderState

// repeated int64 nextIndex = 1;
inline int leaderState::_internal_nextindex_size() const {
  return nextindex_.size();
}
inline int leaderState::nextindex_size() const {
  return _internal_nextindex_size();
}
inline void leaderState::clear_nextindex() {
  nextindex_.Clear();
}
inline int64_t leaderState::_internal_nextindex(int index) const {
  return nextindex_.Get(index);
}
inline int64_t leaderState::nextindex(int index) const {
  // @@protoc_insertion_point(field_get:raft.leaderState.nextIndex)
  return _internal_nextindex(index);
}
inline void leaderState::set_nextindex(int index, int64_t value) {
  nextindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft.leaderState.nextIndex)
}
inline void leaderState::_internal_add_nextindex(int64_t value) {
  nextindex_.Add(value);
}
inline void leaderState::add_nextindex(int64_t value) {
  _internal_add_nextindex(value);
  // @@protoc_insertion_point(field_add:raft.leaderState.nextIndex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
leaderState::_internal_nextindex() const {
  return nextindex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
leaderState::nextindex() const {
  // @@protoc_insertion_point(field_list:raft.leaderState.nextIndex)
  return _internal_nextindex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
leaderState::_internal_mutable_nextindex() {
  return &nextindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
leaderState::mutable_nextindex() {
  // @@protoc_insertion_point(field_mutable_list:raft.leaderState.nextIndex)
  return _internal_mutable_nextindex();
}

// repeated int64 matchIndex = 2;
inline int leaderState::_internal_matchindex_size() const {
  return matchindex_.size();
}
inline int leaderState::matchindex_size() const {
  return _internal_matchindex_size();
}
inline void leaderState::clear_matchindex() {
  matchindex_.Clear();
}
inline int64_t leaderState::_internal_matchindex(int index) const {
  return matchindex_.Get(index);
}
inline int64_t leaderState::matchindex(int index) const {
  // @@protoc_insertion_point(field_get:raft.leaderState.matchIndex)
  return _internal_matchindex(index);
}
inline void leaderState::set_matchindex(int index, int64_t value) {
  matchindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft.leaderState.matchIndex)
}
inline void leaderState::_internal_add_matchindex(int64_t value) {
  matchindex_.Add(value);
}
inline void leaderState::add_matchindex(int64_t value) {
  _internal_add_matchindex(value);
  // @@protoc_insertion_point(field_add:raft.leaderState.matchIndex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
leaderState::_internal_matchindex() const {
  return matchindex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
leaderState::matchindex() const {
  // @@protoc_insertion_point(field_list:raft.leaderState.matchIndex)
  return _internal_matchindex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
leaderState::_internal_mutable_matchindex() {
  return &matchindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
leaderState::mutable_matchindex() {
  // @@protoc_insertion_point(field_mutable_list:raft.leaderState.matchIndex)
  return _internal_mutable_matchindex();
}

// -------------------------------------------------------------------

// RequestVote

// int64 term = 1;
inline void RequestVote::clear_term() {
  term_ = int64_t{0};
}
inline int64_t RequestVote::_internal_term() const {
  return term_;
}
inline int64_t RequestVote::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.term)
  return _internal_term();
}
inline void RequestVote::_internal_set_term(int64_t value) {
  
  term_ = value;
}
inline void RequestVote::set_term(int64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.term)
}

// int64 candidateId = 2;
inline void RequestVote::clear_candidateid() {
  candidateid_ = int64_t{0};
}
inline int64_t RequestVote::_internal_candidateid() const {
  return candidateid_;
}
inline int64_t RequestVote::candidateid() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.candidateId)
  return _internal_candidateid();
}
inline void RequestVote::_internal_set_candidateid(int64_t value) {
  
  candidateid_ = value;
}
inline void RequestVote::set_candidateid(int64_t value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.candidateId)
}

// int64 lastLogIndex = 3;
inline void RequestVote::clear_lastlogindex() {
  lastlogindex_ = int64_t{0};
}
inline int64_t RequestVote::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline int64_t RequestVote::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVote::_internal_set_lastlogindex(int64_t value) {
  
  lastlogindex_ = value;
}
inline void RequestVote::set_lastlogindex(int64_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.lastLogIndex)
}

// int64 lastLogTerm = 4;
inline void RequestVote::clear_lastlogterm() {
  lastlogterm_ = int64_t{0};
}
inline int64_t RequestVote::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline int64_t RequestVote::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVote::_internal_set_lastlogterm(int64_t value) {
  
  lastlogterm_ = value;
}
inline void RequestVote::set_lastlogterm(int64_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// int64 term = 1;
inline void RequestVoteResponse::clear_term() {
  term_ = int64_t{0};
}
inline int64_t RequestVoteResponse::_internal_term() const {
  return term_;
}
inline int64_t RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(int64_t value) {
  
  term_ = value;
}
inline void RequestVoteResponse::set_term(int64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteResponse.term)
}

// bool voteGranted = 2;
inline void RequestVoteResponse::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteResponse::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteResponse::votegranted() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteResponse.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteResponse::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteResponse::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteResponse.voteGranted)
}

// -------------------------------------------------------------------

// AppendEntries

// int64 term = 1;
inline void AppendEntries::clear_term() {
  term_ = int64_t{0};
}
inline int64_t AppendEntries::_internal_term() const {
  return term_;
}
inline int64_t AppendEntries::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.term)
  return _internal_term();
}
inline void AppendEntries::_internal_set_term(int64_t value) {
  
  term_ = value;
}
inline void AppendEntries::set_term(int64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.term)
}

// int64 prevLogIndex = 2;
inline void AppendEntries::clear_prevlogindex() {
  prevlogindex_ = int64_t{0};
}
inline int64_t AppendEntries::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline int64_t AppendEntries::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntries::_internal_set_prevlogindex(int64_t value) {
  
  prevlogindex_ = value;
}
inline void AppendEntries::set_prevlogindex(int64_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.prevLogIndex)
}

// int64 prevLogTerm = 3;
inline void AppendEntries::clear_prevlogterm() {
  prevlogterm_ = int64_t{0};
}
inline int64_t AppendEntries::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline int64_t AppendEntries::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntries::_internal_set_prevlogterm(int64_t value) {
  
  prevlogterm_ = value;
}
inline void AppendEntries::set_prevlogterm(int64_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.prevLogTerm)
}

// int64 leaderCommit = 4;
inline void AppendEntries::clear_leadercommit() {
  leadercommit_ = int64_t{0};
}
inline int64_t AppendEntries::_internal_leadercommit() const {
  return leadercommit_;
}
inline int64_t AppendEntries::leadercommit() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.leaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntries::_internal_set_leadercommit(int64_t value) {
  
  leadercommit_ = value;
}
inline void AppendEntries::set_leadercommit(int64_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.leaderCommit)
}

// repeated .raft.Entry entries = 5;
inline int AppendEntries::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntries::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntries::clear_entries() {
  entries_.Clear();
}
inline ::raft::Entry* AppendEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft.AppendEntries.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >*
AppendEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft.AppendEntries.entries)
  return &entries_;
}
inline const ::raft::Entry& AppendEntries::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::raft::Entry& AppendEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.entries)
  return _internal_entries(index);
}
inline ::raft::Entry* AppendEntries::_internal_add_entries() {
  return entries_.Add();
}
inline ::raft::Entry* AppendEntries::add_entries() {
  ::raft::Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:raft.AppendEntries.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::Entry >&
AppendEntries::entries() const {
  // @@protoc_insertion_point(field_list:raft.AppendEntries.entries)
  return entries_;
}

// int64 n_entries = 6;
inline void AppendEntries::clear_n_entries() {
  n_entries_ = int64_t{0};
}
inline int64_t AppendEntries::_internal_n_entries() const {
  return n_entries_;
}
inline int64_t AppendEntries::n_entries() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.n_entries)
  return _internal_n_entries();
}
inline void AppendEntries::_internal_set_n_entries(int64_t value) {
  
  n_entries_ = value;
}
inline void AppendEntries::set_n_entries(int64_t value) {
  _internal_set_n_entries(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.n_entries)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// int64 term = 1;
inline void AppendEntriesResponse::clear_term() {
  term_ = int64_t{0};
}
inline int64_t AppendEntriesResponse::_internal_term() const {
  return term_;
}
inline int64_t AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.term)
  return _internal_term();
}
inline void AppendEntriesResponse::_internal_set_term(int64_t value) {
  
  term_ = value;
}
inline void AppendEntriesResponse::set_term(int64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.term)
}

// bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponse::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.success)
  return _internal_success();
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.success)
}

// int32 current_idx = 3;
inline void AppendEntriesResponse::clear_current_idx() {
  current_idx_ = 0;
}
inline int32_t AppendEntriesResponse::_internal_current_idx() const {
  return current_idx_;
}
inline int32_t AppendEntriesResponse::current_idx() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.current_idx)
  return _internal_current_idx();
}
inline void AppendEntriesResponse::_internal_set_current_idx(int32_t value) {
  
  current_idx_ = value;
}
inline void AppendEntriesResponse::set_current_idx(int32_t value) {
  _internal_set_current_idx(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.current_idx)
}

// int32 first_idx = 4;
inline void AppendEntriesResponse::clear_first_idx() {
  first_idx_ = 0;
}
inline int32_t AppendEntriesResponse::_internal_first_idx() const {
  return first_idx_;
}
inline int32_t AppendEntriesResponse::first_idx() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.first_idx)
  return _internal_first_idx();
}
inline void AppendEntriesResponse::_internal_set_first_idx(int32_t value) {
  
  first_idx_ = value;
}
inline void AppendEntriesResponse::set_first_idx(int32_t value) {
  _internal_set_first_idx(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.first_idx)
}

// -------------------------------------------------------------------

// KeepAlive

// int64 term = 1;
inline void KeepAlive::clear_term() {
  term_ = int64_t{0};
}
inline int64_t KeepAlive::_internal_term() const {
  return term_;
}
inline int64_t KeepAlive::term() const {
  // @@protoc_insertion_point(field_get:raft.KeepAlive.term)
  return _internal_term();
}
inline void KeepAlive::_internal_set_term(int64_t value) {
  
  term_ = value;
}
inline void KeepAlive::set_term(int64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.KeepAlive.term)
}

// int64 leaderId = 2;
inline void KeepAlive::clear_leaderid() {
  leaderid_ = int64_t{0};
}
inline int64_t KeepAlive::_internal_leaderid() const {
  return leaderid_;
}
inline int64_t KeepAlive::leaderid() const {
  // @@protoc_insertion_point(field_get:raft.KeepAlive.leaderId)
  return _internal_leaderid();
}
inline void KeepAlive::_internal_set_leaderid(int64_t value) {
  
  leaderid_ = value;
}
inline void KeepAlive::set_leaderid(int64_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raft.KeepAlive.leaderId)
}

// -------------------------------------------------------------------

// KeepAliveResponse

// int64 term = 1;
inline void KeepAliveResponse::clear_term() {
  term_ = int64_t{0};
}
inline int64_t KeepAliveResponse::_internal_term() const {
  return term_;
}
inline int64_t KeepAliveResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.KeepAliveResponse.term)
  return _internal_term();
}
inline void KeepAliveResponse::_internal_set_term(int64_t value) {
  
  term_ = value;
}
inline void KeepAliveResponse::set_term(int64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.KeepAliveResponse.term)
}

// bool success = 2;
inline void KeepAliveResponse::clear_success() {
  success_ = false;
}
inline bool KeepAliveResponse::_internal_success() const {
  return success_;
}
inline bool KeepAliveResponse::success() const {
  // @@protoc_insertion_point(field_get:raft.KeepAliveResponse.success)
  return _internal_success();
}
inline void KeepAliveResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void KeepAliveResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raft.KeepAliveResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raft::RaftState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::RaftState>() {
  return ::raft::RaftState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
